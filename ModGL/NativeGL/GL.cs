﻿//
// This file is generated by a tool.
//
// ReSharper disable InconsistentNaming

using System;
using System.Runtime.InteropServices;


namespace ModGL.NativeGL
{
    public static class Constants
    {
        public const uint ActiveAtomicCounterBuffers = 0x92d9;
        public const uint ActiveAttributeMaxLength = 0x8b8a;
        public const uint ActiveAttributes = 0x8b89;
        public const uint ActiveProgram = 0x8259;
        public const uint ActiveResources = 0x92f5;
        public const uint ActiveSubroutineMaxLength = 0x8e48;
        public const uint ActiveSubroutineUniformLocations = 0x8e47;
        public const uint ActiveSubroutineUniformMaxLength = 0x8e49;
        public const uint ActiveSubroutineUniforms = 0x8de6;
        public const uint ActiveSubroutines = 0x8de5;
        public const uint ActiveTexture = 0x84e0;
        public const uint ActiveUniformBlockMaxNameLength = 0x8a35;
        public const uint ActiveUniformBlocks = 0x8a36;
        public const uint ActiveUniformMaxLength = 0x8b87;
        public const uint ActiveUniforms = 0x8b86;
        public const uint ActiveVariables = 0x9305;
        public const uint AliasedLineWidthRange = 0x846e;
        public const uint Alpha = 0x1906;
        public const uint AlreadySignaled = 0x911a;
        public const uint Always = 0x207;
        public const uint And = 0x1501;
        public const uint AndInverted = 0x1504;
        public const uint AndReverse = 0x1502;
        public const uint AnySamplesPassed = 0x8c2f;
        public const uint AnySamplesPassedConservative = 0x8d6a;
        public const uint ArrayBuffer = 0x8892;
        public const uint ArrayBufferBinding = 0x8894;
        public const uint ArraySize = 0x92fb;
        public const uint ArrayStride = 0x92fe;
        public const uint AtomicCounterBuffer = 0x92c0;
        public const uint AtomicCounterBufferActiveAtomicCounterIndices = 0x92c6;
        public const uint AtomicCounterBufferActiveAtomicCounters = 0x92c5;
        public const uint AtomicCounterBufferBinding = 0x92c1;
        public const uint AtomicCounterBufferDataSize = 0x92c4;
        public const uint AtomicCounterBufferIndex = 0x9301;
        public const uint AtomicCounterBufferReferencedByComputeShader = 0x90ed;
        public const uint AtomicCounterBufferReferencedByFragmentShader = 0x92cb;
        public const uint AtomicCounterBufferReferencedByGeometryShader = 0x92ca;
        public const uint AtomicCounterBufferReferencedByTessControlShader = 0x92c8;
        public const uint AtomicCounterBufferReferencedByTessEvaluationShader = 0x92c9;
        public const uint AtomicCounterBufferReferencedByVertexShader = 0x92c7;
        public const uint AtomicCounterBufferSize = 0x92c3;
        public const uint AtomicCounterBufferStart = 0x92c2;
        public const uint AttachedShaders = 0x8b85;
        public const uint AutoGenerateMipmap = 0x8295;
        public const uint Back = 0x405;
        public const uint BackLeft = 0x402;
        public const uint BackRight = 0x403;
        public const uint Bgr = 0x80e0;
        public const uint BgrInteger = 0x8d9a;
        public const uint Bgra = 0x80e1;
        public const uint BgraInteger = 0x8d9b;
        public const uint Blend = 0xbe2;
        public const uint BlendColor = 0x8005;
        public const uint BlendDst = 0xbe0;
        public const uint BlendDstAlpha = 0x80ca;
        public const uint BlendDstRgb = 0x80c8;
        public const uint BlendEquation = 0x8009;
        public const uint BlendEquationAlpha = 0x883d;
        public const uint BlendEquationRgb = 0x8009;
        public const uint BlendSrc = 0xbe1;
        public const uint BlendSrcAlpha = 0x80cb;
        public const uint BlendSrcRgb = 0x80c9;
        public const uint BlockIndex = 0x92fd;
        public const uint Blue = 0x1905;
        public const uint BlueInteger = 0x8d96;
        public const uint Buffer = 0x82e0;
        public const uint BufferAccess = 0x88bb;
        public const uint BufferAccessFlags = 0x911f;
        public const uint BufferBinding = 0x9302;
        public const uint BufferDataSize = 0x9303;
        public const uint BufferImmutableStorage = 0x821f;
        public const uint BufferMapLength = 0x9120;
        public const uint BufferMapOffset = 0x9121;
        public const uint BufferMapPointer = 0x88bd;
        public const uint BufferMapped = 0x88bc;
        public const uint BufferSize = 0x8764;
        public const uint BufferStorageFlags = 0x8220;
        public const uint BufferUsage = 0x8765;
        public const uint BufferVariable = 0x92e5;
        public const uint Byte = 0x1400;
        public const uint CaveatSupport = 0x82b8;
        public const uint Ccw = 0x901;
        public const uint ClampReadColor = 0x891c;
        public const uint ClampToBorder = 0x812d;
        public const uint ClampToEdge = 0x812f;
        public const uint Clear = 0x1500;
        public const uint ClearBuffer = 0x82b4;
        public const uint ClearTexture = 0x9365;
        public const uint ClipDistance0 = 0x3000;
        public const uint ClipDistance1 = 0x3001;
        public const uint ClipDistance2 = 0x3002;
        public const uint ClipDistance3 = 0x3003;
        public const uint ClipDistance4 = 0x3004;
        public const uint ClipDistance5 = 0x3005;
        public const uint ClipDistance6 = 0x3006;
        public const uint ClipDistance7 = 0x3007;
        public const uint Color = 0x1800;
        public const uint ColorAttachment0 = 0x8ce0;
        public const uint ColorAttachment1 = 0x8ce1;
        public const uint ColorAttachment10 = 0x8cea;
        public const uint ColorAttachment11 = 0x8ceb;
        public const uint ColorAttachment12 = 0x8cec;
        public const uint ColorAttachment13 = 0x8ced;
        public const uint ColorAttachment14 = 0x8cee;
        public const uint ColorAttachment15 = 0x8cef;
        public const uint ColorAttachment2 = 0x8ce2;
        public const uint ColorAttachment3 = 0x8ce3;
        public const uint ColorAttachment4 = 0x8ce4;
        public const uint ColorAttachment5 = 0x8ce5;
        public const uint ColorAttachment6 = 0x8ce6;
        public const uint ColorAttachment7 = 0x8ce7;
        public const uint ColorAttachment8 = 0x8ce8;
        public const uint ColorAttachment9 = 0x8ce9;
        public const uint ColorClearValue = 0xc22;
        public const uint ColorComponents = 0x8283;
        public const uint ColorEncoding = 0x8296;
        public const uint ColorLogicOp = 0xbf2;
        public const uint ColorRenderable = 0x8286;
        public const uint ColorWritemask = 0xc23;
        public const uint CompareRefToTexture = 0x884e;
        public const uint CompatibleSubroutines = 0x8e4b;
        public const uint CompileStatus = 0x8b81;
        public const uint CompressedR11Eac = 0x9270;
        public const uint CompressedRed = 0x8225;
        public const uint CompressedRedRgtc1 = 0x8dbb;
        public const uint CompressedRg = 0x8226;
        public const uint CompressedRgRgtc2 = 0x8dbd;
        public const uint CompressedRg11Eac = 0x9272;
        public const uint CompressedRgb = 0x84ed;
        public const uint CompressedRgbBptcSignedFloat = 0x8e8e;
        public const uint CompressedRgbBptcUnsignedFloat = 0x8e8f;
        public const uint CompressedRgb8Etc2 = 0x9274;
        public const uint CompressedRgb8PunchthroughAlpha1Etc2 = 0x9276;
        public const uint CompressedRgba = 0x84ee;
        public const uint CompressedRgbaBptcUnorm = 0x8e8c;
        public const uint CompressedRgba8Etc2Eac = 0x9278;
        public const uint CompressedSignedR11Eac = 0x9271;
        public const uint CompressedSignedRedRgtc1 = 0x8dbc;
        public const uint CompressedSignedRgRgtc2 = 0x8dbe;
        public const uint CompressedSignedRg11Eac = 0x9273;
        public const uint CompressedSrgb = 0x8c48;
        public const uint CompressedSrgbAlpha = 0x8c49;
        public const uint CompressedSrgbAlphaBptcUnorm = 0x8e8d;
        public const uint CompressedSrgb8Alpha8Etc2Eac = 0x9279;
        public const uint CompressedSrgb8Etc2 = 0x9275;
        public const uint CompressedSrgb8PunchthroughAlpha1Etc2 = 0x9277;
        public const uint CompressedTextureFormats = 0x86a3;
        public const uint ComputeShader = 0x91b9;
        public const uint ComputeSubroutine = 0x92ed;
        public const uint ComputeSubroutineUniform = 0x92f3;
        public const uint ComputeTexture = 0x82a0;
        public const uint ComputeWorkGroupSize = 0x8267;
        public const uint ConditionSatisfied = 0x911c;
        public const uint ConstantAlpha = 0x8003;
        public const uint ConstantColor = 0x8001;
        public const uint ContextFlags = 0x821e;
        public const uint ContextProfileMask = 0x9126;
        public const uint Copy = 0x1503;
        public const uint CopyInverted = 0x150c;
        public const uint CopyReadBuffer = 0x8f36;
        public const uint CopyReadBufferBinding = 0x8f36;
        public const uint CopyWriteBuffer = 0x8f37;
        public const uint CopyWriteBufferBinding = 0x8f37;
        public const uint CullFace = 0xb44;
        public const uint CullFaceMode = 0xb45;
        public const uint CurrentProgram = 0x8b8d;
        public const uint CurrentQuery = 0x8865;
        public const uint CurrentVertexAttrib = 0x8626;
        public const uint Cw = 0x900;
        public const uint DebugCallbackFunction = 0x8244;
        public const uint DebugCallbackUserParam = 0x8245;
        public const uint DebugGroupStackDepth = 0x826d;
        public const uint DebugLoggedMessages = 0x9145;
        public const uint DebugNextLoggedMessageLength = 0x8243;
        public const uint DebugOutput = 0x92e0;
        public const uint DebugOutputSynchronous = 0x8242;
        public const uint DebugSeverityHigh = 0x9146;
        public const uint DebugSeverityLow = 0x9148;
        public const uint DebugSeverityMedium = 0x9147;
        public const uint DebugSeverityNotification = 0x826b;
        public const uint DebugSourceApi = 0x8246;
        public const uint DebugSourceApplication = 0x824a;
        public const uint DebugSourceOther = 0x824b;
        public const uint DebugSourceShaderCompiler = 0x8248;
        public const uint DebugSourceThirdParty = 0x8249;
        public const uint DebugSourceWindowSystem = 0x8247;
        public const uint DebugTypeDeprecatedBehavior = 0x824d;
        public const uint DebugTypeError = 0x824c;
        public const uint DebugTypeMarker = 0x8268;
        public const uint DebugTypeOther = 0x8251;
        public const uint DebugTypePerformance = 0x8250;
        public const uint DebugTypePopGroup = 0x826a;
        public const uint DebugTypePortability = 0x824f;
        public const uint DebugTypePushGroup = 0x8269;
        public const uint DebugTypeUndefinedBehavior = 0x824e;
        public const uint Decr = 0x1e03;
        public const uint DecrWrap = 0x8508;
        public const uint DeleteStatus = 0x8b80;
        public const uint Depth = 0x1801;
        public const uint DepthAttachment = 0x8d00;
        public const uint DepthClamp = 0x864f;
        public const uint DepthClearValue = 0xb73;
        public const uint DepthComponent = 0x1902;
        public const uint DepthComponent16 = 0x81a5;
        public const uint DepthComponent24 = 0x81a6;
        public const uint DepthComponent32 = 0x81a7;
        public const uint DepthComponent32f = 0x8cac;
        public const uint DepthComponents = 0x8284;
        public const uint DepthFunc = 0xb74;
        public const uint DepthRange = 0xb70;
        public const uint DepthRenderable = 0x8287;
        public const uint DepthStencil = 0x84f9;
        public const uint DepthStencilAttachment = 0x821a;
        public const uint DepthStencilTextureMode = 0x90ea;
        public const uint DepthTest = 0xb71;
        public const uint DepthWritemask = 0xb72;
        public const uint Depth24Stencil8 = 0x88f0;
        public const uint Depth32fStencil8 = 0x8cad;
        public const uint DispatchIndirectBuffer = 0x90ee;
        public const uint DispatchIndirectBufferBinding = 0x90ef;
        public const uint DisplayList = 0x82e7;
        public const uint Dither = 0xbd0;
        public const uint DontCare = 0x1100;
        public const uint Double = 0x140a;
        public const uint DoubleMat2 = 0x8f46;
        public const uint DoubleMat2x3 = 0x8f49;
        public const uint DoubleMat2x4 = 0x8f4a;
        public const uint DoubleMat3 = 0x8f47;
        public const uint DoubleMat3x2 = 0x8f4b;
        public const uint DoubleMat3x4 = 0x8f4c;
        public const uint DoubleMat4 = 0x8f48;
        public const uint DoubleMat4x2 = 0x8f4d;
        public const uint DoubleMat4x3 = 0x8f4e;
        public const uint DoubleVec2 = 0x8ffc;
        public const uint DoubleVec3 = 0x8ffd;
        public const uint DoubleVec4 = 0x8ffe;
        public const uint Doublebuffer = 0xc32;
        public const uint DrawBuffer = 0xc01;
        public const uint DrawBuffer0 = 0x8825;
        public const uint DrawBuffer1 = 0x8826;
        public const uint DrawBuffer10 = 0x882f;
        public const uint DrawBuffer11 = 0x8830;
        public const uint DrawBuffer12 = 0x8831;
        public const uint DrawBuffer13 = 0x8832;
        public const uint DrawBuffer14 = 0x8833;
        public const uint DrawBuffer15 = 0x8834;
        public const uint DrawBuffer2 = 0x8827;
        public const uint DrawBuffer3 = 0x8828;
        public const uint DrawBuffer4 = 0x8829;
        public const uint DrawBuffer5 = 0x882a;
        public const uint DrawBuffer6 = 0x882b;
        public const uint DrawBuffer7 = 0x882c;
        public const uint DrawBuffer8 = 0x882d;
        public const uint DrawBuffer9 = 0x882e;
        public const uint DrawFramebuffer = 0x8ca9;
        public const uint DrawFramebufferBinding = 0x8ca6;
        public const uint DrawIndirectBuffer = 0x8f3f;
        public const uint DrawIndirectBufferBinding = 0x8f43;
        public const uint DstAlpha = 0x304;
        public const uint DstColor = 0x306;
        public const uint DynamicCopy = 0x88ea;
        public const uint DynamicDraw = 0x88e8;
        public const uint DynamicRead = 0x88e9;
        public const uint ElementArrayBuffer = 0x8893;
        public const uint ElementArrayBufferBinding = 0x8895;
        public const uint Equal = 0x202;
        public const uint Equiv = 0x1509;
        public const uint Extensions = 0x1f03;
        public const uint Fastest = 0x1101;
        public const uint Fill = 0x1b02;
        public const uint Filter = 0x829a;
        public const uint FirstVertexConvention = 0x8e4d;
        public const uint Fixed = 0x140c;
        public const uint FixedOnly = 0x891d;
        public const uint Float = 0x1406;
        public const uint Float32UnsignedInt248Rev = 0x8dad;
        public const uint FractionalEven = 0x8e7c;
        public const uint FractionalOdd = 0x8e7b;
        public const uint FragmentInterpolationOffsetBits = 0x8e5d;
        public const uint FragmentShaderDerivativeHint = 0x8b8b;
        public const uint FragmentSubroutine = 0x92ec;
        public const uint FragmentSubroutineUniform = 0x92f2;
        public const uint FragmentTexture = 0x829f;
        public const uint Framebuffer = 0x8d40;
        public const uint FramebufferAttachmentAlphaSize = 0x8215;
        public const uint FramebufferAttachmentBlueSize = 0x8214;
        public const uint FramebufferAttachmentColorEncoding = 0x8210;
        public const uint FramebufferAttachmentComponentType = 0x8211;
        public const uint FramebufferAttachmentDepthSize = 0x8216;
        public const uint FramebufferAttachmentGreenSize = 0x8213;
        public const uint FramebufferAttachmentLayered = 0x8da7;
        public const uint FramebufferAttachmentObjectName = 0x8cd1;
        public const uint FramebufferAttachmentObjectType = 0x8cd0;
        public const uint FramebufferAttachmentRedSize = 0x8212;
        public const uint FramebufferAttachmentStencilSize = 0x8217;
        public const uint FramebufferAttachmentTextureCubeMapFace = 0x8cd3;
        public const uint FramebufferAttachmentTextureLayer = 0x8cd4;
        public const uint FramebufferAttachmentTextureLevel = 0x8cd2;
        public const uint FramebufferBinding = 0x8ca6;
        public const uint FramebufferBlend = 0x828b;
        public const uint FramebufferComplete = 0x8cd5;
        public const uint FramebufferDefault = 0x8218;
        public const uint FramebufferDefaultFixedSampleLocations = 0x9314;
        public const uint FramebufferDefaultHeight = 0x9311;
        public const uint FramebufferDefaultLayers = 0x9312;
        public const uint FramebufferDefaultSamples = 0x9313;
        public const uint FramebufferDefaultWidth = 0x9310;
        public const uint FramebufferIncompleteAttachment = 0x8cd6;
        public const uint FramebufferIncompleteDimensions = 0x8cd9;
        public const uint FramebufferIncompleteDrawBuffer = 0x8cdb;
        public const uint FramebufferIncompleteLayerTargets = 0x8da8;
        public const uint FramebufferIncompleteMissingAttachment = 0x8cd7;
        public const uint FramebufferIncompleteMultisample = 0x8d56;
        public const uint FramebufferIncompleteReadBuffer = 0x8cdc;
        public const uint FramebufferRenderable = 0x8289;
        public const uint FramebufferRenderableLayered = 0x828a;
        public const uint FramebufferSrgb = 0x8db9;
        public const uint FramebufferUndefined = 0x8219;
        public const uint FramebufferUnsupported = 0x8cdd;
        public const uint Front = 0x404;
        public const uint FrontAndBack = 0x408;
        public const uint FrontFace = 0xb46;
        public const uint FrontLeft = 0x400;
        public const uint FrontRight = 0x401;
        public const uint FullSupport = 0x82b7;
        public const uint FuncAdd = 0x8006;
        public const uint FuncReverseSubtract = 0x800b;
        public const uint FuncSubtract = 0x800a;
        public const uint GeometryInputType = 0x8917;
        public const uint GeometryOutputType = 0x8918;
        public const uint GeometryShader = 0x8dd9;
        public const uint GeometryShaderInvocations = 0x887f;
        public const uint GeometrySubroutine = 0x92eb;
        public const uint GeometrySubroutineUniform = 0x92f1;
        public const uint GeometryTexture = 0x829e;
        public const uint GeometryVerticesOut = 0x8916;
        public const uint Gequal = 0x206;
        public const uint GetTextureImageFormat = 0x8291;
        public const uint GetTextureImageType = 0x8292;
        public const uint Greater = 0x204;
        public const uint Green = 0x1904;
        public const uint GreenInteger = 0x8d95;
        public const uint HalfFloat = 0x140b;
        public const uint HighFloat = 0x8df2;
        public const uint HighInt = 0x8df5;
        public const uint Image1d = 0x904c;
        public const uint Image1dArray = 0x9052;
        public const uint Image2d = 0x904d;
        public const uint Image2dArray = 0x9053;
        public const uint Image2dMultisample = 0x9055;
        public const uint Image2dMultisampleArray = 0x9056;
        public const uint Image2dRect = 0x904f;
        public const uint Image3d = 0x904e;
        public const uint ImageBindingAccess = 0x8f3e;
        public const uint ImageBindingFormat = 0x906e;
        public const uint ImageBindingLayer = 0x8f3d;
        public const uint ImageBindingLayered = 0x8f3c;
        public const uint ImageBindingLevel = 0x8f3b;
        public const uint ImageBindingName = 0x8f3a;
        public const uint ImageBuffer = 0x9051;
        public const uint ImageClass1X16 = 0x82be;
        public const uint ImageClass1X32 = 0x82bb;
        public const uint ImageClass1X8 = 0x82c1;
        public const uint ImageClass1010102 = 0x82c3;
        public const uint ImageClass111110 = 0x82c2;
        public const uint ImageClass2X16 = 0x82bd;
        public const uint ImageClass2X32 = 0x82ba;
        public const uint ImageClass2X8 = 0x82c0;
        public const uint ImageClass4X16 = 0x82bc;
        public const uint ImageClass4X32 = 0x82b9;
        public const uint ImageClass4X8 = 0x82bf;
        public const uint ImageCompatibilityClass = 0x82a8;
        public const uint ImageCube = 0x9050;
        public const uint ImageCubeMapArray = 0x9054;
        public const uint ImageFormatCompatibilityByClass = 0x90c9;
        public const uint ImageFormatCompatibilityBySize = 0x90c8;
        public const uint ImageFormatCompatibilityType = 0x90c7;
        public const uint ImagePixelFormat = 0x82a9;
        public const uint ImagePixelType = 0x82aa;
        public const uint ImageTexelSize = 0x82a7;
        public const uint ImplementationColorReadFormat = 0x8b9b;
        public const uint ImplementationColorReadType = 0x8b9a;
        public const uint Incr = 0x1e02;
        public const uint IncrWrap = 0x8507;
        public const uint Index = 0x8222;
        public const uint InfoLogLength = 0x8b84;
        public const uint Int = 0x1404;
        public const uint Int2101010Rev = 0x8d9f;
        public const uint IntImage1d = 0x9057;
        public const uint IntImage1dArray = 0x905d;
        public const uint IntImage2d = 0x9058;
        public const uint IntImage2dArray = 0x905e;
        public const uint IntImage2dMultisample = 0x9060;
        public const uint IntImage2dMultisampleArray = 0x9061;
        public const uint IntImage2dRect = 0x905a;
        public const uint IntImage3d = 0x9059;
        public const uint IntImageBuffer = 0x905c;
        public const uint IntImageCube = 0x905b;
        public const uint IntImageCubeMapArray = 0x905f;
        public const uint IntSampler1d = 0x8dc9;
        public const uint IntSampler1dArray = 0x8dce;
        public const uint IntSampler2d = 0x8dca;
        public const uint IntSampler2dArray = 0x8dcf;
        public const uint IntSampler2dMultisample = 0x9109;
        public const uint IntSampler2dMultisampleArray = 0x910c;
        public const uint IntSampler2dRect = 0x8dcd;
        public const uint IntSampler3d = 0x8dcb;
        public const uint IntSamplerBuffer = 0x8dd0;
        public const uint IntSamplerCube = 0x8dcc;
        public const uint IntSamplerCubeMapArray = 0x900e;
        public const uint InterleavedAttribs = 0x8c8c;
        public const uint InternalformatAlphaSize = 0x8274;
        public const uint InternalformatAlphaType = 0x827b;
        public const uint InternalformatBlueSize = 0x8273;
        public const uint InternalformatBlueType = 0x827a;
        public const uint InternalformatDepthSize = 0x8275;
        public const uint InternalformatDepthType = 0x827c;
        public const uint InternalformatGreenSize = 0x8272;
        public const uint InternalformatGreenType = 0x8279;
        public const uint InternalformatPreferred = 0x8270;
        public const uint InternalformatRedSize = 0x8271;
        public const uint InternalformatRedType = 0x8278;
        public const uint InternalformatSharedSize = 0x8277;
        public const uint InternalformatStencilSize = 0x8276;
        public const uint InternalformatStencilType = 0x827d;
        public const uint InternalformatSupported = 0x826f;
        public const uint InvalidEnum = 0x500;
        public const uint InvalidFramebufferOperation = 0x506;
        public const uint InvalidOperation = 0x502;
        public const uint InvalidValue = 0x501;
        public const uint Invert = 0x150a;
        public const uint IsPerPatch = 0x92e7;
        public const uint IsRowMajor = 0x9300;
        public const uint Isolines = 0x8e7a;
        public const uint Keep = 0x1e00;
        public const uint LastVertexConvention = 0x8e4e;
        public const uint LayerProvokingVertex = 0x825e;
        public const uint Left = 0x406;
        public const uint Lequal = 0x203;
        public const uint Less = 0x201;
        public const uint Line = 0x1b01;
        public const uint LineLoop = 0x2;
        public const uint LineSmooth = 0xb20;
        public const uint LineSmoothHint = 0xc52;
        public const uint LineStrip = 0x3;
        public const uint LineStripAdjacency = 0xb;
        public const uint LineWidth = 0xb21;
        public const uint LineWidthGranularity = 0xb23;
        public const uint LineWidthRange = 0xb22;
        public const uint Linear = 0x2601;
        public const uint LinearMipmapLinear = 0x2703;
        public const uint LinearMipmapNearest = 0x2701;
        public const uint Lines = 0x1;
        public const uint LinesAdjacency = 0xa;
        public const uint LinkStatus = 0x8b82;
        public const uint Location = 0x930e;
        public const uint LocationComponent = 0x934a;
        public const uint LocationIndex = 0x930f;
        public const uint LogicOpMode = 0xbf0;
        public const uint LowFloat = 0x8df0;
        public const uint LowInt = 0x8df3;
        public const uint LowerLeft = 0x8ca1;
        public const uint MajorVersion = 0x821b;
        public const uint ManualGenerateMipmap = 0x8294;
        public const uint MatrixStride = 0x92ff;
        public const uint Max = 0x8008;
        public const uint Max3dTextureSize = 0x8073;
        public const uint MaxArrayTextureLayers = 0x88ff;
        public const uint MaxAtomicCounterBufferBindings = 0x92dc;
        public const uint MaxAtomicCounterBufferSize = 0x92d8;
        public const uint MaxClipDistances = 0xd32;
        public const uint MaxColorAttachments = 0x8cdf;
        public const uint MaxColorTextureSamples = 0x910e;
        public const uint MaxCombinedAtomicCounterBuffers = 0x92d1;
        public const uint MaxCombinedAtomicCounters = 0x92d7;
        public const uint MaxCombinedComputeUniformComponents = 0x8266;
        public const uint MaxCombinedDimensions = 0x8282;
        public const uint MaxCombinedFragmentUniformComponents = 0x8a33;
        public const uint MaxCombinedImageUniforms = 0x90cf;
        public const uint MaxCombinedImageUnitsAndFragmentOutputs = 0x8f39;
        public const uint MaxCombinedShaderOutputResources = 0x8f39;
        public const uint MaxCombinedShaderStorageBlocks = 0x90dc;
        public const uint MaxCombinedTessControlUniformComponents = 0x8e1e;
        public const uint MaxCombinedTessEvaluationUniformComponents = 0x8e1f;
        public const uint MaxCombinedTextureImageUnits = 0x8b4d;
        public const uint MaxCombinedUniformBlocks = 0x8a2e;
        public const uint MaxCombinedVertexUniformComponents = 0x8a31;
        public const uint MaxComputeAtomicCounterBuffers = 0x8264;
        public const uint MaxComputeAtomicCounters = 0x8265;
        public const uint MaxComputeImageUniforms = 0x91bd;
        public const uint MaxComputeShaderStorageBlocks = 0x90db;
        public const uint MaxComputeSharedMemorySize = 0x8262;
        public const uint MaxComputeTextureImageUnits = 0x91bc;
        public const uint MaxComputeUniformBlocks = 0x91bb;
        public const uint MaxComputeUniformComponents = 0x8263;
        public const uint MaxComputeWorkGroupCount = 0x91be;
        public const uint MaxComputeWorkGroupInvocations = 0x90eb;
        public const uint MaxComputeWorkGroupSize = 0x91bf;
        public const uint MaxCubeMapTextureSize = 0x851c;
        public const uint MaxDebugGroupStackDepth = 0x826c;
        public const uint MaxDebugLoggedMessages = 0x9144;
        public const uint MaxDebugMessageLength = 0x9143;
        public const uint MaxDepth = 0x8280;
        public const uint MaxDepthTextureSamples = 0x910f;
        public const uint MaxDrawBuffers = 0x8824;
        public const uint MaxDualSourceDrawBuffers = 0x88fc;
        public const uint MaxElementIndex = 0x8d6b;
        public const uint MaxElementsIndices = 0x80e9;
        public const uint MaxElementsVertices = 0x80e8;
        public const uint MaxFragmentAtomicCounterBuffers = 0x92d0;
        public const uint MaxFragmentAtomicCounters = 0x92d6;
        public const uint MaxFragmentImageUniforms = 0x90ce;
        public const uint MaxFragmentInputComponents = 0x9125;
        public const uint MaxFragmentInterpolationOffset = 0x8e5c;
        public const uint MaxFragmentShaderStorageBlocks = 0x90da;
        public const uint MaxFragmentUniformBlocks = 0x8a2d;
        public const uint MaxFragmentUniformComponents = 0x8b49;
        public const uint MaxFragmentUniformVectors = 0x8dfd;
        public const uint MaxFramebufferHeight = 0x9316;
        public const uint MaxFramebufferLayers = 0x9317;
        public const uint MaxFramebufferSamples = 0x9318;
        public const uint MaxFramebufferWidth = 0x9315;
        public const uint MaxGeometryAtomicCounterBuffers = 0x92cf;
        public const uint MaxGeometryAtomicCounters = 0x92d5;
        public const uint MaxGeometryImageUniforms = 0x90cd;
        public const uint MaxGeometryInputComponents = 0x9123;
        public const uint MaxGeometryOutputComponents = 0x9124;
        public const uint MaxGeometryOutputVertices = 0x8de0;
        public const uint MaxGeometryShaderInvocations = 0x8e5a;
        public const uint MaxGeometryShaderStorageBlocks = 0x90d7;
        public const uint MaxGeometryTextureImageUnits = 0x8c29;
        public const uint MaxGeometryTotalOutputComponents = 0x8de1;
        public const uint MaxGeometryUniformComponents = 0x8ddf;
        public const uint MaxHeight = 0x827f;
        public const uint MaxImageSamples = 0x906d;
        public const uint MaxImageUnits = 0x8f38;
        public const uint MaxIntegerSamples = 0x9110;
        public const uint MaxLabelLength = 0x82e8;
        public const uint MaxLayers = 0x8281;
        public const uint MaxNameLength = 0x92f6;
        public const uint MaxNumActiveVariables = 0x92f7;
        public const uint MaxNumCompatibleSubroutines = 0x92f8;
        public const uint MaxPatchVertices = 0x8e7d;
        public const uint MaxProgramTexelOffset = 0x8905;
        public const uint MaxProgramTextureGatherOffset = 0x8e5f;
        public const uint MaxRectangleTextureSize = 0x84f8;
        public const uint MaxRenderbufferSize = 0x84e8;
        public const uint MaxSampleMaskWords = 0x8e59;
        public const uint MaxSamples = 0x8d57;
        public const uint MaxServerWaitTimeout = 0x9111;
        public const uint MaxShaderStorageBlockSize = 0x90de;
        public const uint MaxShaderStorageBufferBindings = 0x90dd;
        public const uint MaxSubroutineUniformLocations = 0x8de8;
        public const uint MaxSubroutines = 0x8de7;
        public const uint MaxTessControlAtomicCounterBuffers = 0x92cd;
        public const uint MaxTessControlAtomicCounters = 0x92d3;
        public const uint MaxTessControlImageUniforms = 0x90cb;
        public const uint MaxTessControlInputComponents = 0x886c;
        public const uint MaxTessControlOutputComponents = 0x8e83;
        public const uint MaxTessControlShaderStorageBlocks = 0x90d8;
        public const uint MaxTessControlTextureImageUnits = 0x8e81;
        public const uint MaxTessControlTotalOutputComponents = 0x8e85;
        public const uint MaxTessControlUniformBlocks = 0x8e89;
        public const uint MaxTessControlUniformComponents = 0x8e7f;
        public const uint MaxTessEvaluationAtomicCounterBuffers = 0x92ce;
        public const uint MaxTessEvaluationAtomicCounters = 0x92d4;
        public const uint MaxTessEvaluationImageUniforms = 0x90cc;
        public const uint MaxTessEvaluationInputComponents = 0x886d;
        public const uint MaxTessEvaluationOutputComponents = 0x8e86;
        public const uint MaxTessEvaluationShaderStorageBlocks = 0x90d9;
        public const uint MaxTessEvaluationTextureImageUnits = 0x8e82;
        public const uint MaxTessEvaluationUniformBlocks = 0x8e8a;
        public const uint MaxTessEvaluationUniformComponents = 0x8e80;
        public const uint MaxTessGenLevel = 0x8e7e;
        public const uint MaxTessPatchComponents = 0x8e84;
        public const uint MaxTextureBufferSize = 0x8c2b;
        public const uint MaxTextureImageUnits = 0x8872;
        public const uint MaxTextureLodBias = 0x84fd;
        public const uint MaxTextureSize = 0xd33;
        public const uint MaxTransformFeedbackBuffers = 0x8e70;
        public const uint MaxTransformFeedbackInterleavedComponents = 0x8c8a;
        public const uint MaxTransformFeedbackSeparateAttribs = 0x8c8b;
        public const uint MaxTransformFeedbackSeparateComponents = 0x8c80;
        public const uint MaxUniformBlockSize = 0x8a30;
        public const uint MaxUniformBufferBindings = 0x8a2f;
        public const uint MaxUniformLocations = 0x826e;
        public const uint MaxVaryingComponents = 0x8b4b;
        public const uint MaxVaryingFloats = 0x8b4b;
        public const uint MaxVaryingVectors = 0x8dfc;
        public const uint MaxVertexAtomicCounterBuffers = 0x92cc;
        public const uint MaxVertexAtomicCounters = 0x92d2;
        public const uint MaxVertexAttribBindings = 0x82da;
        public const uint MaxVertexAttribRelativeOffset = 0x82d9;
        public const uint MaxVertexAttribStride = 0x82e5;
        public const uint MaxVertexAttribs = 0x8869;
        public const uint MaxVertexImageUniforms = 0x90ca;
        public const uint MaxVertexOutputComponents = 0x9122;
        public const uint MaxVertexShaderStorageBlocks = 0x90d6;
        public const uint MaxVertexStreams = 0x8e71;
        public const uint MaxVertexTextureImageUnits = 0x8b4c;
        public const uint MaxVertexUniformBlocks = 0x8a2b;
        public const uint MaxVertexUniformComponents = 0x8b4a;
        public const uint MaxVertexUniformVectors = 0x8dfb;
        public const uint MaxViewportDims = 0xd3a;
        public const uint MaxViewports = 0x825b;
        public const uint MaxWidth = 0x827e;
        public const uint MediumFloat = 0x8df1;
        public const uint MediumInt = 0x8df4;
        public const uint Min = 0x8007;
        public const uint MinFragmentInterpolationOffset = 0x8e5b;
        public const uint MinMapBufferAlignment = 0x90bc;
        public const uint MinProgramTexelOffset = 0x8904;
        public const uint MinProgramTextureGatherOffset = 0x8e5e;
        public const uint MinSampleShadingValue = 0x8c37;
        public const uint MinorVersion = 0x821c;
        public const uint Mipmap = 0x8293;
        public const uint MirrorClampToEdge = 0x8743;
        public const uint MirroredRepeat = 0x8370;
        public const uint Multisample = 0x809d;
        public const uint NameLength = 0x92f9;
        public const uint Nand = 0x150e;
        public const uint Nearest = 0x2600;
        public const uint NearestMipmapLinear = 0x2702;
        public const uint NearestMipmapNearest = 0x2700;
        public const uint Never = 0x200;
        public const uint Nicest = 0x1102;
        public const uint Noop = 0x1505;
        public const uint Nor = 0x1508;
        public const uint Notequal = 0x205;
        public const uint NumActiveVariables = 0x9304;
        public const uint NumCompatibleSubroutines = 0x8e4a;
        public const uint NumCompressedTextureFormats = 0x86a2;
        public const uint NumExtensions = 0x821d;
        public const uint NumProgramBinaryFormats = 0x87fe;
        public const uint NumSampleCounts = 0x9380;
        public const uint NumShaderBinaryFormats = 0x8df9;
        public const uint NumShadingLanguageVersions = 0x82e9;
        public const uint ObjectType = 0x9112;
        public const uint Offset = 0x92fc;
        public const uint OneMinusConstantAlpha = 0x8004;
        public const uint OneMinusConstantColor = 0x8002;
        public const uint OneMinusDstAlpha = 0x305;
        public const uint OneMinusDstColor = 0x307;
        public const uint OneMinusSrcAlpha = 0x303;
        public const uint OneMinusSrcColor = 0x301;
        public const uint OneMinusSrc1Alpha = 0x88fb;
        public const uint OneMinusSrc1Color = 0x88fa;
        public const uint Or = 0x1507;
        public const uint OrInverted = 0x150d;
        public const uint OrReverse = 0x150b;
        public const uint OutOfMemory = 0x505;
        public const uint PackAlignment = 0xd05;
        public const uint PackCompressedBlockDepth = 0x912d;
        public const uint PackCompressedBlockHeight = 0x912c;
        public const uint PackCompressedBlockSize = 0x912e;
        public const uint PackCompressedBlockWidth = 0x912b;
        public const uint PackImageHeight = 0x806c;
        public const uint PackLsbFirst = 0xd01;
        public const uint PackRowLength = 0xd02;
        public const uint PackSkipImages = 0x806b;
        public const uint PackSkipPixels = 0xd04;
        public const uint PackSkipRows = 0xd03;
        public const uint PackSwapBytes = 0xd00;
        public const uint PatchDefaultInnerLevel = 0x8e73;
        public const uint PatchDefaultOuterLevel = 0x8e74;
        public const uint PatchVertices = 0x8e72;
        public const uint Patches = 0xe;
        public const uint PixelPackBuffer = 0x88eb;
        public const uint PixelPackBufferBinding = 0x88ed;
        public const uint PixelUnpackBuffer = 0x88ec;
        public const uint PixelUnpackBufferBinding = 0x88ef;
        public const uint Point = 0x1b00;
        public const uint PointFadeThresholdSize = 0x8128;
        public const uint PointSize = 0xb11;
        public const uint PointSizeGranularity = 0xb13;
        public const uint PointSizeRange = 0xb12;
        public const uint PointSpriteCoordOrigin = 0x8ca0;
        public const uint Points = 0x0;
        public const uint PolygonMode = 0xb40;
        public const uint PolygonOffsetFactor = 0x8038;
        public const uint PolygonOffsetFill = 0x8037;
        public const uint PolygonOffsetLine = 0x2a02;
        public const uint PolygonOffsetPoint = 0x2a01;
        public const uint PolygonOffsetUnits = 0x2a00;
        public const uint PolygonSmooth = 0xb41;
        public const uint PolygonSmoothHint = 0xc53;
        public const uint PrimitiveRestart = 0x8f9d;
        public const uint PrimitiveRestartFixedIndex = 0x8d69;
        public const uint PrimitiveRestartForPatchesSupported = 0x8221;
        public const uint PrimitiveRestartIndex = 0x8f9e;
        public const uint PrimitivesGenerated = 0x8c87;
        public const uint Program = 0x82e2;
        public const uint ProgramBinaryFormats = 0x87ff;
        public const uint ProgramBinaryLength = 0x8741;
        public const uint ProgramBinaryRetrievableHint = 0x8257;
        public const uint ProgramInput = 0x92e3;
        public const uint ProgramOutput = 0x92e4;
        public const uint ProgramPipeline = 0x82e4;
        public const uint ProgramPipelineBinding = 0x825a;
        public const uint ProgramPointSize = 0x8642;
        public const uint ProgramSeparable = 0x8258;
        public const uint ProvokingVertex = 0x8e4f;
        public const uint ProxyTexture1d = 0x8063;
        public const uint ProxyTexture1dArray = 0x8c19;
        public const uint ProxyTexture2d = 0x8064;
        public const uint ProxyTexture2dArray = 0x8c1b;
        public const uint ProxyTexture2dMultisample = 0x9101;
        public const uint ProxyTexture2dMultisampleArray = 0x9103;
        public const uint ProxyTexture3d = 0x8070;
        public const uint ProxyTextureCubeMap = 0x851b;
        public const uint ProxyTextureCubeMapArray = 0x900b;
        public const uint ProxyTextureRectangle = 0x84f7;
        public const uint QuadsFollowProvokingVertexConvention = 0x8e4c;
        public const uint Query = 0x82e3;
        public const uint QueryBuffer = 0x9192;
        public const uint QueryBufferBinding = 0x9193;
        public const uint QueryByRegionNoWait = 0x8e16;
        public const uint QueryByRegionWait = 0x8e15;
        public const uint QueryCounterBits = 0x8864;
        public const uint QueryNoWait = 0x8e14;
        public const uint QueryResult = 0x8866;
        public const uint QueryResultAvailable = 0x8867;
        public const uint QueryResultNoWait = 0x9194;
        public const uint QueryWait = 0x8e13;
        public const uint R11fG11fB10f = 0x8c3a;
        public const uint R16 = 0x822a;
        public const uint R16Snorm = 0x8f98;
        public const uint R16f = 0x822d;
        public const uint R16i = 0x8233;
        public const uint R16ui = 0x8234;
        public const uint R3G3B2 = 0x2a10;
        public const uint R32f = 0x822e;
        public const uint R32i = 0x8235;
        public const uint R32ui = 0x8236;
        public const uint R8 = 0x8229;
        public const uint R8Snorm = 0x8f94;
        public const uint R8i = 0x8231;
        public const uint R8ui = 0x8232;
        public const uint RasterizerDiscard = 0x8c89;
        public const uint ReadBuffer = 0xc02;
        public const uint ReadFramebuffer = 0x8ca8;
        public const uint ReadFramebufferBinding = 0x8caa;
        public const uint ReadOnly = 0x88b8;
        public const uint ReadPixels = 0x828c;
        public const uint ReadPixelsFormat = 0x828d;
        public const uint ReadPixelsType = 0x828e;
        public const uint ReadWrite = 0x88ba;
        public const uint Red = 0x1903;
        public const uint RedInteger = 0x8d94;
        public const uint ReferencedByComputeShader = 0x930b;
        public const uint ReferencedByFragmentShader = 0x930a;
        public const uint ReferencedByGeometryShader = 0x9309;
        public const uint ReferencedByTessControlShader = 0x9307;
        public const uint ReferencedByTessEvaluationShader = 0x9308;
        public const uint ReferencedByVertexShader = 0x9306;
        public const uint Renderbuffer = 0x8d41;
        public const uint RenderbufferAlphaSize = 0x8d53;
        public const uint RenderbufferBinding = 0x8ca7;
        public const uint RenderbufferBlueSize = 0x8d52;
        public const uint RenderbufferDepthSize = 0x8d54;
        public const uint RenderbufferGreenSize = 0x8d51;
        public const uint RenderbufferHeight = 0x8d43;
        public const uint RenderbufferInternalFormat = 0x8d44;
        public const uint RenderbufferRedSize = 0x8d50;
        public const uint RenderbufferSamples = 0x8cab;
        public const uint RenderbufferStencilSize = 0x8d55;
        public const uint RenderbufferWidth = 0x8d42;
        public const uint Renderer = 0x1f01;
        public const uint Repeat = 0x2901;
        public const uint Replace = 0x1e01;
        public const uint Rg = 0x8227;
        public const uint RgInteger = 0x8228;
        public const uint Rg16 = 0x822c;
        public const uint Rg16Snorm = 0x8f99;
        public const uint Rg16f = 0x822f;
        public const uint Rg16i = 0x8239;
        public const uint Rg16ui = 0x823a;
        public const uint Rg32f = 0x8230;
        public const uint Rg32i = 0x823b;
        public const uint Rg32ui = 0x823c;
        public const uint Rg8 = 0x822b;
        public const uint Rg8Snorm = 0x8f95;
        public const uint Rg8i = 0x8237;
        public const uint Rg8ui = 0x8238;
        public const uint Rgb = 0x1907;
        public const uint RgbInteger = 0x8d98;
        public const uint Rgb10 = 0x8052;
        public const uint Rgb10A2 = 0x8059;
        public const uint Rgb10A2ui = 0x906f;
        public const uint Rgb12 = 0x8053;
        public const uint Rgb16 = 0x8054;
        public const uint Rgb16Snorm = 0x8f9a;
        public const uint Rgb16f = 0x881b;
        public const uint Rgb16i = 0x8d89;
        public const uint Rgb16ui = 0x8d77;
        public const uint Rgb32f = 0x8815;
        public const uint Rgb32i = 0x8d83;
        public const uint Rgb32ui = 0x8d71;
        public const uint Rgb4 = 0x804f;
        public const uint Rgb5 = 0x8050;
        public const uint Rgb5A1 = 0x8057;
        public const uint Rgb565 = 0x8d62;
        public const uint Rgb8 = 0x8051;
        public const uint Rgb8Snorm = 0x8f96;
        public const uint Rgb8i = 0x8d8f;
        public const uint Rgb8ui = 0x8d7d;
        public const uint Rgb9E5 = 0x8c3d;
        public const uint Rgba = 0x1908;
        public const uint RgbaInteger = 0x8d99;
        public const uint Rgba12 = 0x805a;
        public const uint Rgba16 = 0x805b;
        public const uint Rgba16Snorm = 0x8f9b;
        public const uint Rgba16f = 0x881a;
        public const uint Rgba16i = 0x8d88;
        public const uint Rgba16ui = 0x8d76;
        public const uint Rgba2 = 0x8055;
        public const uint Rgba32f = 0x8814;
        public const uint Rgba32i = 0x8d82;
        public const uint Rgba32ui = 0x8d70;
        public const uint Rgba4 = 0x8056;
        public const uint Rgba8 = 0x8058;
        public const uint Rgba8Snorm = 0x8f97;
        public const uint Rgba8i = 0x8d8e;
        public const uint Rgba8ui = 0x8d7c;
        public const uint Right = 0x407;
        public const uint SampleAlphaToCoverage = 0x809e;
        public const uint SampleAlphaToOne = 0x809f;
        public const uint SampleBuffers = 0x80a8;
        public const uint SampleCoverage = 0x80a0;
        public const uint SampleCoverageInvert = 0x80ab;
        public const uint SampleCoverageValue = 0x80aa;
        public const uint SampleMask = 0x8e51;
        public const uint SampleMaskValue = 0x8e52;
        public const uint SamplePosition = 0x8e50;
        public const uint SampleShading = 0x8c36;
        public const uint Sampler = 0x82e6;
        public const uint Sampler1dArray = 0x8dc0;
        public const uint Sampler1dArrayShadow = 0x8dc3;
        public const uint Sampler2dArray = 0x8dc1;
        public const uint Sampler2dArrayShadow = 0x8dc4;
        public const uint Sampler2dMultisample = 0x9108;
        public const uint Sampler2dMultisampleArray = 0x910b;
        public const uint SamplerBinding = 0x8919;
        public const uint SamplerBuffer = 0x8dc2;
        public const uint SamplerCubeMapArray = 0x900c;
        public const uint SamplerCubeMapArrayShadow = 0x900d;
        public const uint SamplerCubeShadow = 0x8dc5;
        public const uint Samples = 0x80a9;
        public const uint SamplesPassed = 0x8914;
        public const uint ScissorBox = 0xc10;
        public const uint ScissorTest = 0xc11;
        public const uint SeparateAttribs = 0x8c8d;
        public const uint Set = 0x150f;
        public const uint Shader = 0x82e1;
        public const uint ShaderBinaryFormats = 0x8df8;
        public const uint ShaderCompiler = 0x8dfa;
        public const uint ShaderImageAtomic = 0x82a6;
        public const uint ShaderImageLoad = 0x82a4;
        public const uint ShaderImageStore = 0x82a5;
        public const uint ShaderSourceLength = 0x8b88;
        public const uint ShaderStorageBlock = 0x92e6;
        public const uint ShaderStorageBuffer = 0x90d2;
        public const uint ShaderStorageBufferBinding = 0x90d3;
        public const uint ShaderStorageBufferOffsetAlignment = 0x90df;
        public const uint ShaderStorageBufferSize = 0x90d5;
        public const uint ShaderStorageBufferStart = 0x90d4;
        public const uint ShaderType = 0x8b4f;
        public const uint ShadingLanguageVersion = 0x8b8c;
        public const uint Short = 0x1402;
        public const uint Signaled = 0x9119;
        public const uint SignedNormalized = 0x8f9c;
        public const uint SimultaneousTextureAndDepthTest = 0x82ac;
        public const uint SimultaneousTextureAndDepthWrite = 0x82ae;
        public const uint SimultaneousTextureAndStencilTest = 0x82ad;
        public const uint SimultaneousTextureAndStencilWrite = 0x82af;
        public const uint SmoothLineWidthGranularity = 0xb23;
        public const uint SmoothLineWidthRange = 0xb22;
        public const uint SmoothPointSizeGranularity = 0xb13;
        public const uint SmoothPointSizeRange = 0xb12;
        public const uint SrcAlpha = 0x302;
        public const uint SrcAlphaSaturate = 0x308;
        public const uint SrcColor = 0x300;
        public const uint Src1Color = 0x88f9;
        public const uint Srgb = 0x8c40;
        public const uint SrgbAlpha = 0x8c42;
        public const uint SrgbRead = 0x8297;
        public const uint SrgbWrite = 0x8298;
        public const uint Srgb8 = 0x8c41;
        public const uint Srgb8Alpha8 = 0x8c43;
        public const uint StaticCopy = 0x88e6;
        public const uint StaticDraw = 0x88e4;
        public const uint StaticRead = 0x88e5;
        public const uint Stencil = 0x1802;
        public const uint StencilAttachment = 0x8d20;
        public const uint StencilBackFail = 0x8801;
        public const uint StencilBackFunc = 0x8800;
        public const uint StencilBackPassDepthFail = 0x8802;
        public const uint StencilBackPassDepthPass = 0x8803;
        public const uint StencilBackRef = 0x8ca3;
        public const uint StencilBackValueMask = 0x8ca4;
        public const uint StencilBackWritemask = 0x8ca5;
        public const uint StencilClearValue = 0xb91;
        public const uint StencilComponents = 0x8285;
        public const uint StencilFail = 0xb94;
        public const uint StencilFunc = 0xb92;
        public const uint StencilIndex = 0x1901;
        public const uint StencilIndex1 = 0x8d46;
        public const uint StencilIndex16 = 0x8d49;
        public const uint StencilIndex4 = 0x8d47;
        public const uint StencilIndex8 = 0x8d48;
        public const uint StencilPassDepthFail = 0xb95;
        public const uint StencilPassDepthPass = 0xb96;
        public const uint StencilRef = 0xb97;
        public const uint StencilRenderable = 0x8288;
        public const uint StencilTest = 0xb90;
        public const uint StencilValueMask = 0xb93;
        public const uint StencilWritemask = 0xb98;
        public const uint Stereo = 0xc33;
        public const uint StreamCopy = 0x88e2;
        public const uint StreamDraw = 0x88e0;
        public const uint StreamRead = 0x88e1;
        public const uint SubpixelBits = 0xd50;
        public const uint SyncCondition = 0x9113;
        public const uint SyncFence = 0x9116;
        public const uint SyncFlags = 0x9115;
        public const uint SyncGpuCommandsComplete = 0x9117;
        public const uint SyncStatus = 0x9114;
        public const uint TessControlOutputVertices = 0x8e75;
        public const uint TessControlShader = 0x8e88;
        public const uint TessControlSubroutine = 0x92e9;
        public const uint TessControlSubroutineUniform = 0x92ef;
        public const uint TessControlTexture = 0x829c;
        public const uint TessEvaluationShader = 0x8e87;
        public const uint TessEvaluationSubroutine = 0x92ea;
        public const uint TessEvaluationSubroutineUniform = 0x92f0;
        public const uint TessEvaluationTexture = 0x829d;
        public const uint TessGenMode = 0x8e76;
        public const uint TessGenPointMode = 0x8e79;
        public const uint TessGenSpacing = 0x8e77;
        public const uint TessGenVertexOrder = 0x8e78;
        public const uint Texture = 0x1702;
        public const uint Texture1d = 0xde0;
        public const uint Texture1dArray = 0x8c18;
        public const uint Texture2d = 0xde1;
        public const uint Texture2dArray = 0x8c1a;
        public const uint Texture2dMultisample = 0x9100;
        public const uint Texture2dMultisampleArray = 0x9102;
        public const uint Texture3d = 0x806f;
        public const uint TextureAlphaSize = 0x805f;
        public const uint TextureAlphaType = 0x8c13;
        public const uint TextureBaseLevel = 0x813c;
        public const uint TextureBinding1d = 0x8068;
        public const uint TextureBinding1dArray = 0x8c1c;
        public const uint TextureBinding2d = 0x8069;
        public const uint TextureBinding2dArray = 0x8c1d;
        public const uint TextureBinding2dMultisample = 0x9104;
        public const uint TextureBinding2dMultisampleArray = 0x9105;
        public const uint TextureBinding3d = 0x806a;
        public const uint TextureBindingBuffer = 0x8c2c;
        public const uint TextureBindingCubeMap = 0x8514;
        public const uint TextureBindingCubeMapArray = 0x900a;
        public const uint TextureBindingRectangle = 0x84f6;
        public const uint TextureBlueSize = 0x805e;
        public const uint TextureBlueType = 0x8c12;
        public const uint TextureBorderColor = 0x1004;
        public const uint TextureBuffer = 0x8c2a;
        public const uint TextureBufferBinding = 0x8c2a;
        public const uint TextureBufferDataStoreBinding = 0x8c2d;
        public const uint TextureBufferOffset = 0x919d;
        public const uint TextureBufferOffsetAlignment = 0x919f;
        public const uint TextureBufferSize = 0x919e;
        public const uint TextureCompareFunc = 0x884d;
        public const uint TextureCompareMode = 0x884c;
        public const uint TextureCompressed = 0x86a1;
        public const uint TextureCompressedBlockHeight = 0x82b2;
        public const uint TextureCompressedBlockSize = 0x82b3;
        public const uint TextureCompressedBlockWidth = 0x82b1;
        public const uint TextureCompressedImageSize = 0x86a0;
        public const uint TextureCompressionHint = 0x84ef;
        public const uint TextureCubeMap = 0x8513;
        public const uint TextureCubeMapArray = 0x9009;
        public const uint TextureCubeMapNegativeX = 0x8516;
        public const uint TextureCubeMapNegativeY = 0x8518;
        public const uint TextureCubeMapNegativeZ = 0x851a;
        public const uint TextureCubeMapPositiveX = 0x8515;
        public const uint TextureCubeMapPositiveY = 0x8517;
        public const uint TextureCubeMapPositiveZ = 0x8519;
        public const uint TextureCubeMapSeamless = 0x884f;
        public const uint TextureDepth = 0x8071;
        public const uint TextureDepthSize = 0x884a;
        public const uint TextureDepthType = 0x8c16;
        public const uint TextureFixedSampleLocations = 0x9107;
        public const uint TextureGather = 0x82a2;
        public const uint TextureGatherShadow = 0x82a3;
        public const uint TextureGreenSize = 0x805d;
        public const uint TextureGreenType = 0x8c11;
        public const uint TextureHeight = 0x1001;
        public const uint TextureImageFormat = 0x828f;
        public const uint TextureImageType = 0x8290;
        public const uint TextureImmutableFormat = 0x912f;
        public const uint TextureImmutableLevels = 0x82df;
        public const uint TextureInternalFormat = 0x1003;
        public const uint TextureLodBias = 0x8501;
        public const uint TextureMagFilter = 0x2800;
        public const uint TextureMaxLevel = 0x813d;
        public const uint TextureMaxLod = 0x813b;
        public const uint TextureMinFilter = 0x2801;
        public const uint TextureMinLod = 0x813a;
        public const uint TextureRectangle = 0x84f5;
        public const uint TextureRedSize = 0x805c;
        public const uint TextureRedType = 0x8c10;
        public const uint TextureSamples = 0x9106;
        public const uint TextureShadow = 0x82a1;
        public const uint TextureSharedSize = 0x8c3f;
        public const uint TextureStencilSize = 0x88f1;
        public const uint TextureSwizzleA = 0x8e45;
        public const uint TextureSwizzleB = 0x8e44;
        public const uint TextureSwizzleG = 0x8e43;
        public const uint TextureSwizzleR = 0x8e42;
        public const uint TextureSwizzleRgba = 0x8e46;
        public const uint TextureView = 0x82b5;
        public const uint TextureViewMinLayer = 0x82dd;
        public const uint TextureViewMinLevel = 0x82db;
        public const uint TextureViewNumLayers = 0x82de;
        public const uint TextureViewNumLevels = 0x82dc;
        public const uint TextureWidth = 0x1000;
        public const uint TextureWrapR = 0x8072;
        public const uint TextureWrapS = 0x2802;
        public const uint TextureWrapT = 0x2803;
        public const uint Texture0 = 0x84c0;
        public const uint Texture1 = 0x84c1;
        public const uint Texture10 = 0x84ca;
        public const uint Texture11 = 0x84cb;
        public const uint Texture12 = 0x84cc;
        public const uint Texture13 = 0x84cd;
        public const uint Texture14 = 0x84ce;
        public const uint Texture15 = 0x84cf;
        public const uint Texture16 = 0x84d0;
        public const uint Texture17 = 0x84d1;
        public const uint Texture18 = 0x84d2;
        public const uint Texture19 = 0x84d3;
        public const uint Texture2 = 0x84c2;
        public const uint Texture20 = 0x84d4;
        public const uint Texture21 = 0x84d5;
        public const uint Texture22 = 0x84d6;
        public const uint Texture23 = 0x84d7;
        public const uint Texture24 = 0x84d8;
        public const uint Texture25 = 0x84d9;
        public const uint Texture26 = 0x84da;
        public const uint Texture27 = 0x84db;
        public const uint Texture28 = 0x84dc;
        public const uint Texture29 = 0x84dd;
        public const uint Texture3 = 0x84c3;
        public const uint Texture30 = 0x84de;
        public const uint Texture31 = 0x84df;
        public const uint Texture4 = 0x84c4;
        public const uint Texture5 = 0x84c5;
        public const uint Texture6 = 0x84c6;
        public const uint Texture7 = 0x84c7;
        public const uint Texture8 = 0x84c8;
        public const uint Texture9 = 0x84c9;
        public const uint TimeElapsed = 0x88bf;
        public const uint TimeoutExpired = 0x911b;
        public const uint Timestamp = 0x8e28;
        public const uint TopLevelArraySize = 0x930c;
        public const uint TopLevelArrayStride = 0x930d;
        public const uint TransformFeedback = 0x8e22;
        public const uint TransformFeedbackActive = 0x8e24;
        public const uint TransformFeedbackBinding = 0x8e25;
        public const uint TransformFeedbackBuffer = 0x8c8e;
        public const uint TransformFeedbackBufferActive = 0x8e24;
        public const uint TransformFeedbackBufferBinding = 0x8c8f;
        public const uint TransformFeedbackBufferIndex = 0x934b;
        public const uint TransformFeedbackBufferMode = 0x8c7f;
        public const uint TransformFeedbackBufferPaused = 0x8e23;
        public const uint TransformFeedbackBufferSize = 0x8c85;
        public const uint TransformFeedbackBufferStart = 0x8c84;
        public const uint TransformFeedbackBufferStride = 0x934c;
        public const uint TransformFeedbackPaused = 0x8e23;
        public const uint TransformFeedbackPrimitivesWritten = 0x8c88;
        public const uint TransformFeedbackVarying = 0x92f4;
        public const uint TransformFeedbackVaryingMaxLength = 0x8c76;
        public const uint TransformFeedbackVaryings = 0x8c83;
        public const uint TriangleFan = 0x6;
        public const uint TriangleStrip = 0x5;
        public const uint TriangleStripAdjacency = 0xd;
        public const uint Triangles = 0x4;
        public const uint TrianglesAdjacency = 0xc;
        public const uint Type = 0x92fa;
        public const uint UndefinedVertex = 0x8260;
        public const uint Uniform = 0x92e1;
        public const uint UniformArrayStride = 0x8a3c;
        public const uint UniformAtomicCounterBufferIndex = 0x92da;
        public const uint UniformBlock = 0x92e2;
        public const uint UniformBlockActiveUniformIndices = 0x8a43;
        public const uint UniformBlockActiveUniforms = 0x8a42;
        public const uint UniformBlockBinding = 0x8a3f;
        public const uint UniformBlockDataSize = 0x8a40;
        public const uint UniformBlockIndex = 0x8a3a;
        public const uint UniformBlockNameLength = 0x8a41;
        public const uint UniformBlockReferencedByComputeShader = 0x90ec;
        public const uint UniformBlockReferencedByFragmentShader = 0x8a46;
        public const uint UniformBlockReferencedByTessControlShader = 0x84f0;
        public const uint UniformBlockReferencedByTessEvaluationShader = 0x84f1;
        public const uint UniformBlockReferencedByVertexShader = 0x8a44;
        public const uint UniformBuffer = 0x8a11;
        public const uint UniformBufferBinding = 0x8a28;
        public const uint UniformBufferOffsetAlignment = 0x8a34;
        public const uint UniformBufferSize = 0x8a2a;
        public const uint UniformBufferStart = 0x8a29;
        public const uint UniformIsRowMajor = 0x8a3e;
        public const uint UniformMatrixStride = 0x8a3d;
        public const uint UniformNameLength = 0x8a39;
        public const uint UniformOffset = 0x8a3b;
        public const uint UniformSize = 0x8a38;
        public const uint UniformType = 0x8a37;
        public const uint UnpackAlignment = 0xcf5;
        public const uint UnpackCompressedBlockDepth = 0x9129;
        public const uint UnpackCompressedBlockHeight = 0x9128;
        public const uint UnpackCompressedBlockSize = 0x912a;
        public const uint UnpackCompressedBlockWidth = 0x9127;
        public const uint UnpackImageHeight = 0x806e;
        public const uint UnpackLsbFirst = 0xcf1;
        public const uint UnpackRowLength = 0xcf2;
        public const uint UnpackSkipImages = 0x806d;
        public const uint UnpackSkipPixels = 0xcf4;
        public const uint UnpackSkipRows = 0xcf3;
        public const uint UnpackSwapBytes = 0xcf0;
        public const uint Unsignaled = 0x9118;
        public const uint UnsignedByte = 0x1401;
        public const uint UnsignedByte233Rev = 0x8362;
        public const uint UnsignedByte332 = 0x8032;
        public const uint UnsignedInt = 0x1405;
        public const uint UnsignedInt1010102 = 0x8036;
        public const uint UnsignedInt10f11f11fRev = 0x8c3b;
        public const uint UnsignedInt2101010Rev = 0x8368;
        public const uint UnsignedInt248 = 0x84fa;
        public const uint UnsignedInt5999Rev = 0x8c3e;
        public const uint UnsignedInt8888 = 0x8035;
        public const uint UnsignedInt8888Rev = 0x8367;
        public const uint UnsignedIntAtomicCounter = 0x92db;
        public const uint UnsignedIntImage1d = 0x9062;
        public const uint UnsignedIntImage1dArray = 0x9068;
        public const uint UnsignedIntImage2d = 0x9063;
        public const uint UnsignedIntImage2dArray = 0x9069;
        public const uint UnsignedIntImage2dMultisample = 0x906b;
        public const uint UnsignedIntImage2dMultisampleArray = 0x906c;
        public const uint UnsignedIntImage2dRect = 0x9065;
        public const uint UnsignedIntImage3d = 0x9064;
        public const uint UnsignedIntImageBuffer = 0x9067;
        public const uint UnsignedIntImageCube = 0x9066;
        public const uint UnsignedIntImageCubeMapArray = 0x906a;
        public const uint UnsignedIntSampler1d = 0x8dd1;
        public const uint UnsignedIntSampler1dArray = 0x8dd6;
        public const uint UnsignedIntSampler2d = 0x8dd2;
        public const uint UnsignedIntSampler2dArray = 0x8dd7;
        public const uint UnsignedIntSampler2dMultisample = 0x910a;
        public const uint UnsignedIntSampler2dMultisampleArray = 0x910d;
        public const uint UnsignedIntSampler2dRect = 0x8dd5;
        public const uint UnsignedIntSampler3d = 0x8dd3;
        public const uint UnsignedIntSamplerBuffer = 0x8dd8;
        public const uint UnsignedIntSamplerCube = 0x8dd4;
        public const uint UnsignedIntSamplerCubeMapArray = 0x900f;
        public const uint UnsignedIntVec2 = 0x8dc6;
        public const uint UnsignedIntVec3 = 0x8dc7;
        public const uint UnsignedIntVec4 = 0x8dc8;
        public const uint UnsignedNormalized = 0x8c17;
        public const uint UnsignedShort = 0x1403;
        public const uint UnsignedShort1555Rev = 0x8366;
        public const uint UnsignedShort4444 = 0x8033;
        public const uint UnsignedShort4444Rev = 0x8365;
        public const uint UnsignedShort5551 = 0x8034;
        public const uint UnsignedShort565 = 0x8363;
        public const uint UnsignedShort565Rev = 0x8364;
        public const uint UpperLeft = 0x8ca2;
        public const uint ValidateStatus = 0x8b83;
        public const uint Vendor = 0x1f00;
        public const uint Version = 0x1f02;
        public const uint VertexArrayBinding = 0x85b5;
        public const uint VertexAttribArrayBufferBinding = 0x889f;
        public const uint VertexAttribArrayDivisor = 0x88fe;
        public const uint VertexAttribArrayEnabled = 0x8622;
        public const uint VertexAttribArrayInteger = 0x88fd;
        public const uint VertexAttribArrayLong = 0x874e;
        public const uint VertexAttribArrayNormalized = 0x886a;
        public const uint VertexAttribArrayPointer = 0x8645;
        public const uint VertexAttribArraySize = 0x8623;
        public const uint VertexAttribArrayStride = 0x8624;
        public const uint VertexAttribArrayType = 0x8625;
        public const uint VertexAttribBinding = 0x82d4;
        public const uint VertexAttribRelativeOffset = 0x82d5;
        public const uint VertexBindingBuffer = 0x8f4f;
        public const uint VertexBindingDivisor = 0x82d6;
        public const uint VertexBindingOffset = 0x82d7;
        public const uint VertexBindingStride = 0x82d8;
        public const uint VertexProgramPointSize = 0x8642;
        public const uint VertexSubroutine = 0x92e8;
        public const uint VertexSubroutineUniform = 0x92ee;
        public const uint VertexTexture = 0x829b;
        public const uint ViewClass128Bits = 0x82c4;
        public const uint ViewClass16Bits = 0x82ca;
        public const uint ViewClass24Bits = 0x82c9;
        public const uint ViewClass32Bits = 0x82c8;
        public const uint ViewClass48Bits = 0x82c7;
        public const uint ViewClass64Bits = 0x82c6;
        public const uint ViewClass8Bits = 0x82cb;
        public const uint ViewClass96Bits = 0x82c5;
        public const uint ViewClassBptcFloat = 0x82d3;
        public const uint ViewClassBptcUnorm = 0x82d2;
        public const uint ViewClassRgtc1Red = 0x82d0;
        public const uint ViewClassRgtc2Rg = 0x82d1;
        public const uint ViewClassS3tcDxt1Rgb = 0x82cc;
        public const uint ViewClassS3tcDxt1Rgba = 0x82cd;
        public const uint ViewClassS3tcDxt3Rgba = 0x82ce;
        public const uint ViewClassS3tcDxt5Rgba = 0x82cf;
        public const uint ViewCompatibilityClass = 0x82b6;
        public const uint Viewport = 0xba2;
        public const uint ViewportBoundsRange = 0x825d;
        public const uint ViewportIndexProvokingVertex = 0x825f;
        public const uint ViewportSubpixelBits = 0x825c;
        public const uint WaitFailed = 0x911d;
        public const uint WriteOnly = 0x88b9;
        public const uint Xor = 0x1506;
    }
    public enum AttribMask : uint
    {
        ColorBufferBit = 0x4000,
        DepthBufferBit = 0x100,
        StencilBufferBit = 0x400,
    }
    public enum AlphaFunction : uint
    {
        Always = 0x207,
        Equal = 0x202,
        Gequal = 0x206,
        Greater = 0x204,
        Lequal = 0x203,
        Less = 0x201,
        Never = 0x200,
        Notequal = 0x205,
    }
    public enum BlendingFactorDest : uint
    {
        DstAlpha = 0x304,
        One = 0x1,
        OneMinusDstAlpha = 0x305,
        OneMinusSrcAlpha = 0x303,
        OneMinusSrcColor = 0x301,
        SrcAlpha = 0x302,
        SrcColor = 0x300,
        Zero = 0x0,
    }
    public enum BlendingFactorSrc : uint
    {
        DstAlpha = 0x304,
        DstColor = 0x306,
        One = 0x1,
        OneMinusDstAlpha = 0x305,
        OneMinusDstColor = 0x307,
        OneMinusSrcAlpha = 0x303,
        SrcAlpha = 0x302,
        SrcAlphaSaturate = 0x308,
        Zero = 0x0,
    }
    public enum Boolean : uint
    {
        False = 0x0,
        True = 0x1,
    }
    public enum ClearBufferMask : uint
    {
        ColorBufferBit = 0x4000,
        DepthBufferBit = 0x100,
        StencilBufferBit = 0x400,
    }
    public enum ClipPlaneName : uint
    {
        ClipDistance0 = 0x3000,
        ClipDistance1 = 0x3001,
        ClipDistance2 = 0x3002,
        ClipDistance3 = 0x3003,
        ClipDistance4 = 0x3004,
        ClipDistance5 = 0x3005,
        ClipDistance6 = 0x3006,
        ClipDistance7 = 0x3007,
    }
    public enum ColorMaterialFace : uint
    {
        Back = 0x405,
        Front = 0x404,
        FrontAndBack = 0x408,
    }
    public enum ColorPointerType : uint
    {
        Byte = 0x1400,
        Double = 0x140a,
        Float = 0x1406,
        Int = 0x1404,
        Short = 0x1402,
        UnsignedByte = 0x1401,
        UnsignedInt = 0x1405,
        UnsignedShort = 0x1403,
    }
    public enum ContextFlagMask : uint
    {
        ContextFlagDebugBit = 0x2,
        ContextFlagForwardCompatibleBit = 0x1,
    }
    public enum ContextProfileMask : uint
    {
        ContextCompatibilityProfileBit = 0x2,
        ContextCoreProfileBit = 0x1,
    }
    public enum CullFaceMode : uint
    {
        Back = 0x405,
        Front = 0x404,
        FrontAndBack = 0x408,
    }
    public enum DepthFunction : uint
    {
        Always = 0x207,
        Equal = 0x202,
        Gequal = 0x206,
        Greater = 0x204,
        Lequal = 0x203,
        Less = 0x201,
        Never = 0x200,
        Notequal = 0x205,
    }
    public enum DrawBufferMode : uint
    {
        Back = 0x405,
        BackLeft = 0x402,
        BackRight = 0x403,
        Front = 0x404,
        FrontAndBack = 0x408,
        FrontLeft = 0x400,
        FrontRight = 0x401,
        Left = 0x406,
        None = 0x0,
        Right = 0x407,
    }
    public enum EnableCap : uint
    {
        Blend = 0xbe2,
        ColorLogicOp = 0xbf2,
        CullFace = 0xb44,
        DepthTest = 0xb71,
        Dither = 0xbd0,
        LineSmooth = 0xb20,
        PolygonOffsetFill = 0x8037,
        PolygonOffsetLine = 0x2a02,
        PolygonOffsetPoint = 0x2a01,
        PolygonSmooth = 0xb41,
        ScissorTest = 0xc11,
        StencilTest = 0xb90,
        Texture1d = 0xde0,
        Texture2d = 0xde1,
    }
    public enum ErrorCode : uint
    {
        InvalidEnum = 0x500,
        InvalidFramebufferOperation = 0x506,
        InvalidOperation = 0x502,
        InvalidValue = 0x501,
        NoError = 0x0,
        OutOfMemory = 0x505,
    }
    public enum FogCoordinatePointerType : uint
    {
        Float = 0x1406,
        Double = 0x140a,
    }
    public enum FogMode : uint
    {
        Linear = 0x2601,
    }
    public enum FogPointerTypeEXT : uint
    {
        Float = 0x1406,
        Double = 0x140a,
    }
    public enum FogPointerTypeIBM : uint
    {
        Float = 0x1406,
        Double = 0x140a,
    }
    public enum FrontFaceDirection : uint
    {
        Ccw = 0x901,
        Cw = 0x900,
    }
    public enum GetPName : uint
    {
        AliasedLineWidthRange = 0x846e,
        Blend = 0xbe2,
        BlendDst = 0xbe0,
        BlendSrc = 0xbe1,
        ColorClearValue = 0xc22,
        ColorLogicOp = 0xbf2,
        ColorWritemask = 0xc23,
        CullFace = 0xb44,
        CullFaceMode = 0xb45,
        DepthClearValue = 0xb73,
        DepthFunc = 0xb74,
        DepthRange = 0xb70,
        DepthTest = 0xb71,
        DepthWritemask = 0xb72,
        Dither = 0xbd0,
        Doublebuffer = 0xc32,
        DrawBuffer = 0xc01,
        FrontFace = 0xb46,
        LineSmooth = 0xb20,
        LineSmoothHint = 0xc52,
        LineWidth = 0xb21,
        LineWidthGranularity = 0xb23,
        LineWidthRange = 0xb22,
        LogicOpMode = 0xbf0,
        MaxClipDistances = 0xd32,
        MaxTextureSize = 0xd33,
        MaxViewportDims = 0xd3a,
        PackAlignment = 0xd05,
        PackLsbFirst = 0xd01,
        PackRowLength = 0xd02,
        PackSkipPixels = 0xd04,
        PackSkipRows = 0xd03,
        PackSwapBytes = 0xd00,
        PointSize = 0xb11,
        PointSizeGranularity = 0xb13,
        PointSizeRange = 0xb12,
        PolygonMode = 0xb40,
        PolygonOffsetFactor = 0x8038,
        PolygonOffsetFill = 0x8037,
        PolygonOffsetLine = 0x2a02,
        PolygonOffsetPoint = 0x2a01,
        PolygonOffsetUnits = 0x2a00,
        PolygonSmooth = 0xb41,
        PolygonSmoothHint = 0xc53,
        ReadBuffer = 0xc02,
        ScissorBox = 0xc10,
        ScissorTest = 0xc11,
        SmoothLineWidthGranularity = 0xb23,
        SmoothLineWidthRange = 0xb22,
        SmoothPointSizeGranularity = 0xb13,
        SmoothPointSizeRange = 0xb12,
        StencilClearValue = 0xb91,
        StencilFail = 0xb94,
        StencilFunc = 0xb92,
        StencilPassDepthFail = 0xb95,
        StencilPassDepthPass = 0xb96,
        StencilRef = 0xb97,
        StencilTest = 0xb90,
        StencilValueMask = 0xb93,
        StencilWritemask = 0xb98,
        Stereo = 0xc33,
        SubpixelBits = 0xd50,
        Texture1d = 0xde0,
        Texture2d = 0xde1,
        TextureBinding1d = 0x8068,
        TextureBinding2d = 0x8069,
        TextureBinding3d = 0x806a,
        UnpackAlignment = 0xcf5,
        UnpackLsbFirst = 0xcf1,
        UnpackRowLength = 0xcf2,
        UnpackSkipPixels = 0xcf4,
        UnpackSkipRows = 0xcf3,
        UnpackSwapBytes = 0xcf0,
        Viewport = 0xba2,
    }
    public enum GetTextureParameter : uint
    {
        TextureAlphaSize = 0x805f,
        TextureBlueSize = 0x805e,
        TextureBorderColor = 0x1004,
        TextureGreenSize = 0x805d,
        TextureHeight = 0x1001,
        TextureInternalFormat = 0x1003,
        TextureMagFilter = 0x2800,
        TextureMinFilter = 0x2801,
        TextureRedSize = 0x805c,
        TextureWidth = 0x1000,
        TextureWrapS = 0x2802,
        TextureWrapT = 0x2803,
    }
    public enum HintMode : uint
    {
        DontCare = 0x1100,
        Fastest = 0x1101,
        Nicest = 0x1102,
    }
    public enum HintTarget : uint
    {
        FragmentShaderDerivativeHint = 0x8b8b,
        LineSmoothHint = 0xc52,
        PolygonSmoothHint = 0xc53,
        ProgramBinaryRetrievableHint = 0x8257,
        TextureCompressionHint = 0x84ef,
    }
    public enum IndexPointerType : uint
    {
        Double = 0x140a,
        Float = 0x1406,
        Int = 0x1404,
        Short = 0x1402,
    }
    public enum LightEnvModeSGIX : uint
    {
        Replace = 0x1e01,
    }
    public enum ListNameType : uint
    {
        Byte = 0x1400,
        Float = 0x1406,
        Int = 0x1404,
        Short = 0x1402,
        UnsignedByte = 0x1401,
        UnsignedInt = 0x1405,
        UnsignedShort = 0x1403,
    }
    public enum LogicOp : uint
    {
        And = 0x1501,
        AndInverted = 0x1504,
        AndReverse = 0x1502,
        Clear = 0x1500,
        Copy = 0x1503,
        CopyInverted = 0x150c,
        Equiv = 0x1509,
        Invert = 0x150a,
        Nand = 0x150e,
        Noop = 0x1505,
        Nor = 0x1508,
        Or = 0x1507,
        OrInverted = 0x150d,
        OrReverse = 0x150b,
        Set = 0x150f,
        Xor = 0x1506,
    }
    public enum MapBufferUsageMask : uint
    {
        ClientStorageBit = 0x200,
        DynamicStorageBit = 0x100,
        MapCoherentBit = 0x80,
        MapFlushExplicitBit = 0x10,
        MapInvalidateBufferBit = 0x8,
        MapInvalidateRangeBit = 0x4,
        MapPersistentBit = 0x40,
        MapReadBit = 0x1,
        MapUnsynchronizedBit = 0x20,
        MapWriteBit = 0x2,
    }
    public enum MaterialFace : uint
    {
        Back = 0x405,
        Front = 0x404,
        FrontAndBack = 0x408,
    }
    public enum MatrixMode : uint
    {
        Texture = 0x1702,
    }
    public enum MemoryBarrierMask : uint
    {
        AllBarrierBits = 0xffffffff,
        AtomicCounterBarrierBit = 0x1000,
        BufferUpdateBarrierBit = 0x200,
        ClientMappedBufferBarrierBit = 0x4000,
        CommandBarrierBit = 0x40,
        ElementArrayBarrierBit = 0x2,
        FramebufferBarrierBit = 0x400,
        PixelBufferBarrierBit = 0x80,
        QueryBufferBarrierBit = 0x8000,
        ShaderImageAccessBarrierBit = 0x20,
        ShaderStorageBarrierBit = 0x2000,
        TextureFetchBarrierBit = 0x8,
        TextureUpdateBarrierBit = 0x100,
        TransformFeedbackBarrierBit = 0x800,
        UniformBarrierBit = 0x4,
        VertexAttribArrayBarrierBit = 0x1,
    }
    public enum MeshMode1 : uint
    {
        Line = 0x1b01,
        Point = 0x1b00,
    }
    public enum MeshMode2 : uint
    {
        Fill = 0x1b02,
        Line = 0x1b01,
        Point = 0x1b00,
    }
    public enum NormalPointerType : uint
    {
        Byte = 0x1400,
        Double = 0x140a,
        Float = 0x1406,
        Int = 0x1404,
        Short = 0x1402,
    }
    public enum PixelCopyType : uint
    {
        Color = 0x1800,
        Depth = 0x1801,
        Stencil = 0x1802,
    }
    public enum PixelFormat : uint
    {
        Alpha = 0x1906,
        Blue = 0x1905,
        DepthComponent = 0x1902,
        Green = 0x1904,
        Red = 0x1903,
        Rgb = 0x1907,
        Rgba = 0x1908,
        StencilIndex = 0x1901,
        UnsignedInt = 0x1405,
        UnsignedShort = 0x1403,
    }
    public enum InternalFormat : uint
    {
        R3G3B2 = 0x2a10,
        Rgb10 = 0x8052,
        Rgb10A2 = 0x8059,
        Rgb12 = 0x8053,
        Rgb16 = 0x8054,
        Rgb4 = 0x804f,
        Rgb5 = 0x8050,
        Rgb5A1 = 0x8057,
        Rgb8 = 0x8051,
        Rgba12 = 0x805a,
        Rgba16 = 0x805b,
        Rgba2 = 0x8055,
        Rgba4 = 0x8056,
        Rgba8 = 0x8058,
    }
    public enum PixelStoreParameter : uint
    {
        PackAlignment = 0xd05,
        PackImageHeight = 0x806c,
        PackLsbFirst = 0xd01,
        PackRowLength = 0xd02,
        PackSkipImages = 0x806b,
        PackSkipPixels = 0xd04,
        PackSkipRows = 0xd03,
        PackSwapBytes = 0xd00,
        UnpackAlignment = 0xcf5,
        UnpackImageHeight = 0x806e,
        UnpackLsbFirst = 0xcf1,
        UnpackRowLength = 0xcf2,
        UnpackSkipImages = 0x806d,
        UnpackSkipPixels = 0xcf4,
        UnpackSkipRows = 0xcf3,
        UnpackSwapBytes = 0xcf0,
    }
    public enum PixelTexGenMode : uint
    {
        None = 0x0,
        Rgb = 0x1907,
        Rgba = 0x1908,
    }
    public enum PixelType : uint
    {
        Byte = 0x1400,
        Float = 0x1406,
        Int = 0x1404,
        Short = 0x1402,
        UnsignedByte = 0x1401,
        UnsignedByte332 = 0x8032,
        UnsignedInt = 0x1405,
        UnsignedInt1010102 = 0x8036,
        UnsignedInt8888 = 0x8035,
        UnsignedShort = 0x1403,
        UnsignedShort4444 = 0x8033,
        UnsignedShort5551 = 0x8034,
    }
    public enum PointParameterNameSGIS : uint
    {
        PointFadeThresholdSize = 0x8128,
    }
    public enum PolygonMode : uint
    {
        Fill = 0x1b02,
        Line = 0x1b01,
        Point = 0x1b00,
    }
    public enum PrimitiveType : uint
    {
        Lines = 0x1,
        LinesAdjacency = 0xa,
        LineLoop = 0x2,
        LineStrip = 0x3,
        LineStripAdjacency = 0xb,
        Patches = 0xe,
        Points = 0x0,
        Triangles = 0x4,
        TrianglesAdjacency = 0xc,
        TriangleFan = 0x6,
        TriangleStrip = 0x5,
        TriangleStripAdjacency = 0xd,
    }
    public enum ReadBufferMode : uint
    {
        Back = 0x405,
        BackLeft = 0x402,
        BackRight = 0x403,
        Front = 0x404,
        FrontLeft = 0x400,
        FrontRight = 0x401,
        Left = 0x406,
        Right = 0x407,
    }
    public enum StencilFunction : uint
    {
        Always = 0x207,
        Equal = 0x202,
        Gequal = 0x206,
        Greater = 0x204,
        Lequal = 0x203,
        Less = 0x201,
        Never = 0x200,
        Notequal = 0x205,
    }
    public enum StencilOp : uint
    {
        Decr = 0x1e03,
        Incr = 0x1e02,
        Invert = 0x150a,
        Keep = 0x1e00,
        Replace = 0x1e01,
        Zero = 0x0,
    }
    public enum StringName : uint
    {
        Extensions = 0x1f03,
        Renderer = 0x1f01,
        Vendor = 0x1f00,
        Version = 0x1f02,
    }
    public enum TexCoordPointerType : uint
    {
        Double = 0x140a,
        Float = 0x1406,
        Int = 0x1404,
        Short = 0x1402,
    }
    public enum TextureEnvMode : uint
    {
        Blend = 0xbe2,
    }
    public enum TextureMagFilter : uint
    {
        Linear = 0x2601,
        Nearest = 0x2600,
    }
    public enum TextureMinFilter : uint
    {
        Linear = 0x2601,
        LinearMipmapLinear = 0x2703,
        LinearMipmapNearest = 0x2701,
        Nearest = 0x2600,
        NearestMipmapLinear = 0x2702,
        NearestMipmapNearest = 0x2700,
    }
    public enum TextureParameterName : uint
    {
        TextureBorderColor = 0x1004,
        TextureMagFilter = 0x2800,
        TextureMinFilter = 0x2801,
        TextureWrapR = 0x8072,
        TextureWrapS = 0x2802,
        TextureWrapT = 0x2803,
    }
    public enum TextureTarget : uint
    {
        ProxyTexture1d = 0x8063,
        ProxyTexture2d = 0x8064,
        ProxyTexture3d = 0x8070,
        Texture1d = 0xde0,
        Texture2d = 0xde1,
        Texture3d = 0x806f,
        TextureBaseLevel = 0x813c,
        TextureMaxLevel = 0x813d,
        TextureMaxLod = 0x813b,
        TextureMinLod = 0x813a,
    }
    public enum TextureWrapMode : uint
    {
        ClampToBorder = 0x812d,
        ClampToEdge = 0x812f,
        Repeat = 0x2901,
    }
    public enum UseProgramStageMask : uint
    {
        VertexShaderBit = 0x1,
        FragmentShaderBit = 0x2,
        GeometryShaderBit = 0x4,
        TessControlShaderBit = 0x8,
        TessEvaluationShaderBit = 0x10,
        ComputeShaderBit = 0x20,
        AllShaderBits = 0xffffffff,
    }
    public enum VertexPointerType : uint
    {
        Double = 0x140a,
        Float = 0x1406,
        Int = 0x1404,
        Short = 0x1402,
    }
    public delegate void GLDEBUGPROC(uint source, uint type, uint id, uint severity, int length, ref string message, IntPtr userParam);
    public interface IOpenGL10
    {
        void CullFace(CullFaceMode mode);
        void FrontFace(FrontFaceDirection mode);
        void Hint(HintTarget target, HintMode mode);
        void LineWidth(float width);
        void PointSize(float size);
        void PolygonMode(MaterialFace face, PolygonMode mode);
        void Scissor(int x, int y, int width, int height);
        void TexParameterf(TextureTarget target, TextureParameterName pname, float param);
        void TexParameterfv(TextureTarget target, TextureParameterName pname, [In]float[] @params);
        void TexParameterfv(TextureTarget target, TextureParameterName pname, IntPtr @params);
        unsafe void TexParameterfv(TextureTarget target, TextureParameterName pname, float* @params);
        void TexParameteri(TextureTarget target, TextureParameterName pname, int param);
        void TexParameteriv(TextureTarget target, TextureParameterName pname, [In]int[] @params);
        void TexParameteriv(TextureTarget target, TextureParameterName pname, IntPtr @params);
        unsafe void TexParameteriv(TextureTarget target, TextureParameterName pname, int* @params);
        void TexImage1D(TextureTarget target, int level, int internalformat, int width, int border, PixelFormat format, PixelType type, IntPtr pixels);
        void TexImage2D(TextureTarget target, int level, int internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels);
        void DrawBuffer(DrawBufferMode mode);
        void Clear(uint mask);
        void ClearColor(float red, float green, float blue, float alpha);
        void ClearStencil(int s);
        void ClearDepth(double depth);
        void StencilMask(uint mask);
        void ColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
        void DepthMask(GLboolean flag);
        void Disable(EnableCap cap);
        void Enable(EnableCap cap);
        void Finish();
        void Flush();
        void BlendFunc(BlendingFactorSrc sfactor, BlendingFactorDest dfactor);
        void LogicOp(LogicOp opcode);
        void StencilFunc(StencilFunction func, int @ref, uint mask);
        void StencilOp(StencilOp fail, StencilOp zfail, StencilOp zpass);
        void DepthFunc(DepthFunction func);
        void PixelStoref(PixelStoreParameter pname, float param);
        void PixelStorei(PixelStoreParameter pname, int param);
        void ReadBuffer(ReadBufferMode mode);
        void ReadPixels(int x, int y, int width, int height, PixelFormat format, PixelType type, IntPtr pixels);
        void GetBooleanv(GetPName pname, [Out]GLboolean data);
        void GetDoublev(GetPName pname, [Out]double[] data);
        ErrorCode GetError();
        void GetFloatv(GetPName pname, [Out]float[] data);
        void GetIntegerv(GetPName pname, [Out]int[] data);
        [return: MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstStringReturnMarshaller))]
        string GetString(StringName name);
        void GetTexImage(TextureTarget target, int level, PixelFormat format, PixelType type, IntPtr pixels);
        void GetTexParameterfv(TextureTarget target, GetTextureParameter pname, [Out]float[] @params);
        void GetTexParameteriv(TextureTarget target, GetTextureParameter pname, [Out]int[] @params);
        void GetTexLevelParameterfv(TextureTarget target, int level, GetTextureParameter pname, [Out]float[] @params);
        void GetTexLevelParameteriv(TextureTarget target, int level, GetTextureParameter pname, [Out]int[] @params);
        GLboolean IsEnabled(EnableCap cap);
        void DepthRange(double near, double far);
        void Viewport(int x, int y, int width, int height);
    }
    public interface IOpenGL11 : IOpenGL10
    {
        void DrawArrays(PrimitiveType mode, int first, int count);
        void DrawElements(PrimitiveType mode, int count, uint type, IntPtr indices);
        void PolygonOffset(float factor, float units);
        void CopyTexImage1D(TextureTarget target, int level, InternalFormat internalformat, int x, int y, int width, int border);
        void CopyTexImage2D(TextureTarget target, int level, InternalFormat internalformat, int x, int y, int width, int height, int border);
        void CopyTexSubImage1D(TextureTarget target, int level, int xoffset, int x, int y, int width);
        void CopyTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height);
        void TexSubImage1D(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels);
        void TexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels);
        void BindTexture(TextureTarget target, uint texture);
        void DeleteTextures(int n, [In]uint[] textures);
        void DeleteTextures(int n, IntPtr textures);
        unsafe void DeleteTextures(int n, uint* textures);
        void GenTextures(int n, [Out]uint[] textures);
        GLboolean IsTexture(uint texture);
    }
    public interface IOpenGL12 : IOpenGL11
    {
        void DrawRangeElements(PrimitiveType mode, uint start, uint end, int count, uint type, IntPtr indices);
        void TexImage3D(TextureTarget target, int level, int internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels);
        void TexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels);
        void CopyTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);
    }
    public interface IOpenGL13 : IOpenGL12
    {
        void ActiveTexture(uint texture);
        void SampleCoverage(float value, GLboolean invert);
        void CompressedTexImage3D(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data);
        void CompressedTexImage2D(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, IntPtr data);
        void CompressedTexImage1D(TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, IntPtr data);
        void CompressedTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, IntPtr data);
        void CompressedTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, IntPtr data);
        void CompressedTexSubImage1D(TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, IntPtr data);
        void GetCompressedTexImage(TextureTarget target, int level, IntPtr img);
    }
    public interface IOpenGL14 : IOpenGL13
    {
        void BlendFuncSeparate(uint sfactorRGB, uint dfactorRGB, uint sfactorAlpha, uint dfactorAlpha);
        void MultiDrawArrays(PrimitiveType mode, [In]int[] first, [In]int[] count, int drawcount);
        void MultiDrawElements(PrimitiveType mode, [In]int[] count, uint type, [Out]IntPtr[] indices, int drawcount);
        void PointParameterf(uint pname, float param);
        void PointParameterfv(uint pname, [In]float[] @params);
        void PointParameterfv(uint pname, IntPtr @params);
        unsafe void PointParameterfv(uint pname, float* @params);
        void PointParameteri(uint pname, int param);
        void PointParameteriv(uint pname, [In]int[] @params);
        void PointParameteriv(uint pname, IntPtr @params);
        unsafe void PointParameteriv(uint pname, int* @params);
        void BlendColor(float red, float green, float blue, float alpha);
        void BlendEquation(uint mode);
    }
    public interface IOpenGL15 : IOpenGL14
    {
        void GenQueries(int n, [Out]uint[] ids);
        void DeleteQueries(int n, [In]uint[] ids);
        void DeleteQueries(int n, IntPtr ids);
        unsafe void DeleteQueries(int n, uint* ids);
        GLboolean IsQuery(uint id);
        void BeginQuery(uint target, uint id);
        void EndQuery(uint target);
        void GetQueryiv(uint target, uint pname, [Out]int[] @params);
        void GetQueryObjectiv(uint id, uint pname, [Out]int[] @params);
        void GetQueryObjectuiv(uint id, uint pname, [Out]uint[] @params);
        void BindBuffer(uint target, uint buffer);
        void DeleteBuffers(int n, [In]uint[] buffers);
        void DeleteBuffers(int n, IntPtr buffers);
        unsafe void DeleteBuffers(int n, uint* buffers);
        void GenBuffers(int n, [Out]uint[] buffers);
        GLboolean IsBuffer(uint buffer);
        void BufferData(uint target, IntPtr size, IntPtr data, uint usage);
        void BufferSubData(uint target, IntPtr offset, IntPtr size, IntPtr data);
        void GetBufferSubData(uint target, IntPtr offset, IntPtr size, IntPtr data);
        IntPtr MapBuffer(uint target, uint access);
        GLboolean UnmapBuffer(uint target);
        void GetBufferParameteriv(uint target, uint pname, [Out]int[] @params);
        void GetBufferPointerv(uint target, uint pname, [Out]IntPtr[] @params);
    }
    public interface IOpenGL20 : IOpenGL15
    {
        void BlendEquationSeparate(uint modeRGB, uint modeAlpha);
        void DrawBuffers(int n, [In]uint[] bufs);
        void DrawBuffers(int n, IntPtr bufs);
        unsafe void DrawBuffers(int n, uint* bufs);
        void StencilOpSeparate(uint face, StencilOp sfail, StencilOp dpfail, StencilOp dppass);
        void StencilFuncSeparate(uint face, StencilFunction func, int @ref, uint mask);
        void StencilMaskSeparate(uint face, uint mask);
        void AttachShader(uint program, uint shader);
        void BindAttribLocation(uint program, uint index, [In]string name);
        void CompileShader(uint shader);
        uint CreateProgram();
        uint CreateShader(uint type);
        void DeleteProgram(uint program);
        void DeleteShader(uint shader);
        void DetachShader(uint program, uint shader);
        void DisableVertexAttribArray(uint index);
        void EnableVertexAttribArray(uint index);
        void GetActiveAttrib(uint program, uint index, int bufSize, [Out]int[] length, [Out]int[] size, [Out]uint[] type, ref string name);
        void GetActiveUniform(uint program, uint index, int bufSize, [Out]int[] length, [Out]int[] size, [Out]uint[] type, ref string name);
        void GetAttachedShaders(uint program, int maxCount, [Out]int[] count, [Out]uint[] shaders);
        int GetAttribLocation(uint program, [In]string name);
        void GetProgramiv(uint program, uint pname, [Out]int[] @params);
        void GetProgramInfoLog(uint program, int bufSize, [Out]int[] length, ref string infoLog);
        void GetShaderiv(uint shader, uint pname, [Out]int[] @params);
        void GetShaderInfoLog(uint shader, int bufSize, [Out]int[] length, ref string infoLog);
        void GetShaderSource(uint shader, int bufSize, [Out]int[] length, ref string source);
        int GetUniformLocation(uint program, [In]string name);
        void GetUniformfv(uint program, int location, [Out]float[] @params);
        void GetUniformiv(uint program, int location, [Out]int[] @params);
        void GetVertexAttribdv(uint index, uint pname, [Out]double[] @params);
        void GetVertexAttribfv(uint index, uint pname, [Out]float[] @params);
        void GetVertexAttribiv(uint index, uint pname, [Out]int[] @params);
        void GetVertexAttribPointerv(uint index, uint pname, [Out]IntPtr[] pointer);
        GLboolean IsProgram(uint program);
        GLboolean IsShader(uint shader);
        void LinkProgram(uint program);
        void ShaderSource(uint shader, int count, [In]string[] @string, [In]int[] length);
        void UseProgram(uint program);
        void Uniform1f(int location, float v0);
        void Uniform2f(int location, float v0, float v1);
        void Uniform3f(int location, float v0, float v1, float v2);
        void Uniform4f(int location, float v0, float v1, float v2, float v3);
        void Uniform1i(int location, int v0);
        void Uniform2i(int location, int v0, int v1);
        void Uniform3i(int location, int v0, int v1, int v2);
        void Uniform4i(int location, int v0, int v1, int v2, int v3);
        void Uniform1fv(int location, int count, [In]float[] value);
        void Uniform1fv(int location, int count, IntPtr value);
        unsafe void Uniform1fv(int location, int count, float* value);
        void Uniform2fv(int location, int count, [In]float[] value);
        void Uniform2fv(int location, int count, IntPtr value);
        unsafe void Uniform2fv(int location, int count, float* value);
        void Uniform3fv(int location, int count, [In]float[] value);
        void Uniform3fv(int location, int count, IntPtr value);
        unsafe void Uniform3fv(int location, int count, float* value);
        void Uniform4fv(int location, int count, [In]float[] value);
        void Uniform4fv(int location, int count, IntPtr value);
        unsafe void Uniform4fv(int location, int count, float* value);
        void Uniform1iv(int location, int count, [In]int[] value);
        void Uniform1iv(int location, int count, IntPtr value);
        unsafe void Uniform1iv(int location, int count, int* value);
        void Uniform2iv(int location, int count, [In]int[] value);
        void Uniform2iv(int location, int count, IntPtr value);
        unsafe void Uniform2iv(int location, int count, int* value);
        void Uniform3iv(int location, int count, [In]int[] value);
        void Uniform3iv(int location, int count, IntPtr value);
        unsafe void Uniform3iv(int location, int count, int* value);
        void Uniform4iv(int location, int count, [In]int[] value);
        void Uniform4iv(int location, int count, IntPtr value);
        unsafe void Uniform4iv(int location, int count, int* value);
        void UniformMatrix2fv(int location, int count, GLboolean transpose, [In]float[] value);
        void UniformMatrix2fv(int location, int count, GLboolean transpose, IntPtr value);
        unsafe void UniformMatrix2fv(int location, int count, GLboolean transpose, float* value);
        void UniformMatrix3fv(int location, int count, GLboolean transpose, [In]float[] value);
        void UniformMatrix3fv(int location, int count, GLboolean transpose, IntPtr value);
        unsafe void UniformMatrix3fv(int location, int count, GLboolean transpose, float* value);
        void UniformMatrix4fv(int location, int count, GLboolean transpose, [In]float[] value);
        void UniformMatrix4fv(int location, int count, GLboolean transpose, IntPtr value);
        unsafe void UniformMatrix4fv(int location, int count, GLboolean transpose, float* value);
        void ValidateProgram(uint program);
        void VertexAttrib1d(uint index, double x);
        void VertexAttrib1dv(uint index, [In]double[] v);
        void VertexAttrib1dv(uint index, IntPtr v);
        unsafe void VertexAttrib1dv(uint index, double* v);
        void VertexAttrib1f(uint index, float x);
        void VertexAttrib1fv(uint index, [In]float[] v);
        void VertexAttrib1fv(uint index, IntPtr v);
        unsafe void VertexAttrib1fv(uint index, float* v);
        void VertexAttrib1s(uint index, short x);
        void VertexAttrib1sv(uint index, [In]short[] v);
        void VertexAttrib1sv(uint index, IntPtr v);
        unsafe void VertexAttrib1sv(uint index, short* v);
        void VertexAttrib2d(uint index, double x, double y);
        void VertexAttrib2dv(uint index, [In]double[] v);
        void VertexAttrib2dv(uint index, IntPtr v);
        unsafe void VertexAttrib2dv(uint index, double* v);
        void VertexAttrib2f(uint index, float x, float y);
        void VertexAttrib2fv(uint index, [In]float[] v);
        void VertexAttrib2fv(uint index, IntPtr v);
        unsafe void VertexAttrib2fv(uint index, float* v);
        void VertexAttrib2s(uint index, short x, short y);
        void VertexAttrib2sv(uint index, [In]short[] v);
        void VertexAttrib2sv(uint index, IntPtr v);
        unsafe void VertexAttrib2sv(uint index, short* v);
        void VertexAttrib3d(uint index, double x, double y, double z);
        void VertexAttrib3dv(uint index, [In]double[] v);
        void VertexAttrib3dv(uint index, IntPtr v);
        unsafe void VertexAttrib3dv(uint index, double* v);
        void VertexAttrib3f(uint index, float x, float y, float z);
        void VertexAttrib3fv(uint index, [In]float[] v);
        void VertexAttrib3fv(uint index, IntPtr v);
        unsafe void VertexAttrib3fv(uint index, float* v);
        void VertexAttrib3s(uint index, short x, short y, short z);
        void VertexAttrib3sv(uint index, [In]short[] v);
        void VertexAttrib3sv(uint index, IntPtr v);
        unsafe void VertexAttrib3sv(uint index, short* v);
        void VertexAttrib4Nbv(uint index, [In]sbyte[] v);
        void VertexAttrib4Nbv(uint index, IntPtr v);
        unsafe void VertexAttrib4Nbv(uint index, sbyte* v);
        void VertexAttrib4Niv(uint index, [In]int[] v);
        void VertexAttrib4Niv(uint index, IntPtr v);
        unsafe void VertexAttrib4Niv(uint index, int* v);
        void VertexAttrib4Nsv(uint index, [In]short[] v);
        void VertexAttrib4Nsv(uint index, IntPtr v);
        unsafe void VertexAttrib4Nsv(uint index, short* v);
        void VertexAttrib4Nub(uint index, byte x, byte y, byte z, byte w);
        void VertexAttrib4Nubv(uint index, [In]string v);
        void VertexAttrib4Nuiv(uint index, [In]uint[] v);
        void VertexAttrib4Nuiv(uint index, IntPtr v);
        unsafe void VertexAttrib4Nuiv(uint index, uint* v);
        void VertexAttrib4Nusv(uint index, [In]ushort[] v);
        void VertexAttrib4Nusv(uint index, IntPtr v);
        unsafe void VertexAttrib4Nusv(uint index, ushort* v);
        void VertexAttrib4bv(uint index, [In]sbyte[] v);
        void VertexAttrib4bv(uint index, IntPtr v);
        unsafe void VertexAttrib4bv(uint index, sbyte* v);
        void VertexAttrib4d(uint index, double x, double y, double z, double w);
        void VertexAttrib4dv(uint index, [In]double[] v);
        void VertexAttrib4dv(uint index, IntPtr v);
        unsafe void VertexAttrib4dv(uint index, double* v);
        void VertexAttrib4f(uint index, float x, float y, float z, float w);
        void VertexAttrib4fv(uint index, [In]float[] v);
        void VertexAttrib4fv(uint index, IntPtr v);
        unsafe void VertexAttrib4fv(uint index, float* v);
        void VertexAttrib4iv(uint index, [In]int[] v);
        void VertexAttrib4iv(uint index, IntPtr v);
        unsafe void VertexAttrib4iv(uint index, int* v);
        void VertexAttrib4s(uint index, short x, short y, short z, short w);
        void VertexAttrib4sv(uint index, [In]short[] v);
        void VertexAttrib4sv(uint index, IntPtr v);
        unsafe void VertexAttrib4sv(uint index, short* v);
        void VertexAttrib4ubv(uint index, [In]string v);
        void VertexAttrib4uiv(uint index, [In]uint[] v);
        void VertexAttrib4uiv(uint index, IntPtr v);
        unsafe void VertexAttrib4uiv(uint index, uint* v);
        void VertexAttrib4usv(uint index, [In]ushort[] v);
        void VertexAttrib4usv(uint index, IntPtr v);
        unsafe void VertexAttrib4usv(uint index, ushort* v);
        void VertexAttribPointer(uint index, int size, uint type, GLboolean normalized, int stride, IntPtr pointer);
    }
    public interface IOpenGL21 : IOpenGL20
    {
        void UniformMatrix2x3fv(int location, int count, GLboolean transpose, [In]float[] value);
        void UniformMatrix2x3fv(int location, int count, GLboolean transpose, IntPtr value);
        unsafe void UniformMatrix2x3fv(int location, int count, GLboolean transpose, float* value);
        void UniformMatrix3x2fv(int location, int count, GLboolean transpose, [In]float[] value);
        void UniformMatrix3x2fv(int location, int count, GLboolean transpose, IntPtr value);
        unsafe void UniformMatrix3x2fv(int location, int count, GLboolean transpose, float* value);
        void UniformMatrix2x4fv(int location, int count, GLboolean transpose, [In]float[] value);
        void UniformMatrix2x4fv(int location, int count, GLboolean transpose, IntPtr value);
        unsafe void UniformMatrix2x4fv(int location, int count, GLboolean transpose, float* value);
        void UniformMatrix4x2fv(int location, int count, GLboolean transpose, [In]float[] value);
        void UniformMatrix4x2fv(int location, int count, GLboolean transpose, IntPtr value);
        unsafe void UniformMatrix4x2fv(int location, int count, GLboolean transpose, float* value);
        void UniformMatrix3x4fv(int location, int count, GLboolean transpose, [In]float[] value);
        void UniformMatrix3x4fv(int location, int count, GLboolean transpose, IntPtr value);
        unsafe void UniformMatrix3x4fv(int location, int count, GLboolean transpose, float* value);
        void UniformMatrix4x3fv(int location, int count, GLboolean transpose, [In]float[] value);
        void UniformMatrix4x3fv(int location, int count, GLboolean transpose, IntPtr value);
        unsafe void UniformMatrix4x3fv(int location, int count, GLboolean transpose, float* value);
    }
    public interface IOpenGL30 : IOpenGL21
    {
        void ColorMaski(uint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
        void GetBooleani_v(uint target, uint index, [Out]GLboolean data);
        void GetIntegeri_v(uint target, uint index, [Out]int[] data);
        void Enablei(uint target, uint index);
        void Disablei(uint target, uint index);
        GLboolean IsEnabledi(uint target, uint index);
        void BeginTransformFeedback(uint primitiveMode);
        void EndTransformFeedback();
        void BindBufferRange(uint target, uint index, uint buffer, IntPtr offset, IntPtr size);
        void BindBufferBase(uint target, uint index, uint buffer);
        void TransformFeedbackVaryings(uint program, int count, [In]string[] varyings, uint bufferMode);
        void GetTransformFeedbackVarying(uint program, uint index, int bufSize, [Out]int[] length, [Out]int[] size, [Out]uint[] type, ref string name);
        void ClampColor(uint target, uint clamp);
        void BeginConditionalRender(uint id, uint mode);
        void EndConditionalRender();
        void VertexAttribIPointer(uint index, int size, uint type, int stride, IntPtr pointer);
        void GetVertexAttribIiv(uint index, uint pname, [Out]int[] @params);
        void GetVertexAttribIuiv(uint index, uint pname, [Out]uint[] @params);
        void VertexAttribI1i(uint index, int x);
        void VertexAttribI2i(uint index, int x, int y);
        void VertexAttribI3i(uint index, int x, int y, int z);
        void VertexAttribI4i(uint index, int x, int y, int z, int w);
        void VertexAttribI1ui(uint index, uint x);
        void VertexAttribI2ui(uint index, uint x, uint y);
        void VertexAttribI3ui(uint index, uint x, uint y, uint z);
        void VertexAttribI4ui(uint index, uint x, uint y, uint z, uint w);
        void VertexAttribI1iv(uint index, [In]int[] v);
        void VertexAttribI1iv(uint index, IntPtr v);
        unsafe void VertexAttribI1iv(uint index, int* v);
        void VertexAttribI2iv(uint index, [In]int[] v);
        void VertexAttribI2iv(uint index, IntPtr v);
        unsafe void VertexAttribI2iv(uint index, int* v);
        void VertexAttribI3iv(uint index, [In]int[] v);
        void VertexAttribI3iv(uint index, IntPtr v);
        unsafe void VertexAttribI3iv(uint index, int* v);
        void VertexAttribI4iv(uint index, [In]int[] v);
        void VertexAttribI4iv(uint index, IntPtr v);
        unsafe void VertexAttribI4iv(uint index, int* v);
        void VertexAttribI1uiv(uint index, [In]uint[] v);
        void VertexAttribI1uiv(uint index, IntPtr v);
        unsafe void VertexAttribI1uiv(uint index, uint* v);
        void VertexAttribI2uiv(uint index, [In]uint[] v);
        void VertexAttribI2uiv(uint index, IntPtr v);
        unsafe void VertexAttribI2uiv(uint index, uint* v);
        void VertexAttribI3uiv(uint index, [In]uint[] v);
        void VertexAttribI3uiv(uint index, IntPtr v);
        unsafe void VertexAttribI3uiv(uint index, uint* v);
        void VertexAttribI4uiv(uint index, [In]uint[] v);
        void VertexAttribI4uiv(uint index, IntPtr v);
        unsafe void VertexAttribI4uiv(uint index, uint* v);
        void VertexAttribI4bv(uint index, [In]sbyte[] v);
        void VertexAttribI4bv(uint index, IntPtr v);
        unsafe void VertexAttribI4bv(uint index, sbyte* v);
        void VertexAttribI4sv(uint index, [In]short[] v);
        void VertexAttribI4sv(uint index, IntPtr v);
        unsafe void VertexAttribI4sv(uint index, short* v);
        void VertexAttribI4ubv(uint index, [In]string v);
        void VertexAttribI4usv(uint index, [In]ushort[] v);
        void VertexAttribI4usv(uint index, IntPtr v);
        unsafe void VertexAttribI4usv(uint index, ushort* v);
        void GetUniformuiv(uint program, int location, [Out]uint[] @params);
        void BindFragDataLocation(uint program, uint color, [In]string name);
        int GetFragDataLocation(uint program, [In]string name);
        void Uniform1ui(int location, uint v0);
        void Uniform2ui(int location, uint v0, uint v1);
        void Uniform3ui(int location, uint v0, uint v1, uint v2);
        void Uniform4ui(int location, uint v0, uint v1, uint v2, uint v3);
        void Uniform1uiv(int location, int count, [In]uint[] value);
        void Uniform1uiv(int location, int count, IntPtr value);
        unsafe void Uniform1uiv(int location, int count, uint* value);
        void Uniform2uiv(int location, int count, [In]uint[] value);
        void Uniform2uiv(int location, int count, IntPtr value);
        unsafe void Uniform2uiv(int location, int count, uint* value);
        void Uniform3uiv(int location, int count, [In]uint[] value);
        void Uniform3uiv(int location, int count, IntPtr value);
        unsafe void Uniform3uiv(int location, int count, uint* value);
        void Uniform4uiv(int location, int count, [In]uint[] value);
        void Uniform4uiv(int location, int count, IntPtr value);
        unsafe void Uniform4uiv(int location, int count, uint* value);
        void TexParameterIiv(TextureTarget target, TextureParameterName pname, [In]int[] @params);
        void TexParameterIiv(TextureTarget target, TextureParameterName pname, IntPtr @params);
        unsafe void TexParameterIiv(TextureTarget target, TextureParameterName pname, int* @params);
        void TexParameterIuiv(TextureTarget target, TextureParameterName pname, [In]uint[] @params);
        void TexParameterIuiv(TextureTarget target, TextureParameterName pname, IntPtr @params);
        unsafe void TexParameterIuiv(TextureTarget target, TextureParameterName pname, uint* @params);
        void GetTexParameterIiv(TextureTarget target, GetTextureParameter pname, [Out]int[] @params);
        void GetTexParameterIuiv(TextureTarget target, GetTextureParameter pname, [Out]uint[] @params);
        void ClearBufferiv(uint buffer, int drawbuffer, [In]int[] value);
        void ClearBufferiv(uint buffer, int drawbuffer, IntPtr value);
        unsafe void ClearBufferiv(uint buffer, int drawbuffer, int* value);
        void ClearBufferuiv(uint buffer, int drawbuffer, [In]uint[] value);
        void ClearBufferuiv(uint buffer, int drawbuffer, IntPtr value);
        unsafe void ClearBufferuiv(uint buffer, int drawbuffer, uint* value);
        void ClearBufferfv(uint buffer, int drawbuffer, [In]float[] value);
        void ClearBufferfv(uint buffer, int drawbuffer, IntPtr value);
        unsafe void ClearBufferfv(uint buffer, int drawbuffer, float* value);
        void ClearBufferfi(uint buffer, int drawbuffer, float depth, int stencil);
        [return: MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstStringReturnMarshaller))]
        string GetStringi(uint name, uint index);
        GLboolean IsRenderbuffer(uint renderbuffer);
        void BindRenderbuffer(uint target, uint renderbuffer);
        void DeleteRenderbuffers(int n, [In]uint[] renderbuffers);
        void DeleteRenderbuffers(int n, IntPtr renderbuffers);
        unsafe void DeleteRenderbuffers(int n, uint* renderbuffers);
        void GenRenderbuffers(int n, [Out]uint[] renderbuffers);
        void RenderbufferStorage(uint target, uint internalformat, int width, int height);
        void GetRenderbufferParameteriv(uint target, uint pname, [Out]int[] @params);
        GLboolean IsFramebuffer(uint framebuffer);
        void BindFramebuffer(uint target, uint framebuffer);
        void DeleteFramebuffers(int n, [In]uint[] framebuffers);
        void DeleteFramebuffers(int n, IntPtr framebuffers);
        unsafe void DeleteFramebuffers(int n, uint* framebuffers);
        void GenFramebuffers(int n, [Out]uint[] framebuffers);
        uint CheckFramebufferStatus(uint target);
        void FramebufferTexture1D(uint target, uint attachment, uint textarget, uint texture, int level);
        void FramebufferTexture2D(uint target, uint attachment, uint textarget, uint texture, int level);
        void FramebufferTexture3D(uint target, uint attachment, uint textarget, uint texture, int level, int zoffset);
        void FramebufferRenderbuffer(uint target, uint attachment, uint renderbuffertarget, uint renderbuffer);
        void GetFramebufferAttachmentParameteriv(uint target, uint attachment, uint pname, [Out]int[] @params);
        void GenerateMipmap(uint target);
        void BlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, uint filter);
        void RenderbufferStorageMultisample(uint target, int samples, uint internalformat, int width, int height);
        void FramebufferTextureLayer(uint target, uint attachment, uint texture, int level, int layer);
        IntPtr MapBufferRange(uint target, IntPtr offset, IntPtr length, uint access);
        void FlushMappedBufferRange(uint target, IntPtr offset, IntPtr length);
        void BindVertexArray(uint array);
        void DeleteVertexArrays(int n, [In]uint[] arrays);
        void DeleteVertexArrays(int n, IntPtr arrays);
        unsafe void DeleteVertexArrays(int n, uint* arrays);
        void GenVertexArrays(int n, [Out]uint[] arrays);
        GLboolean IsVertexArray(uint array);
    }
    public interface IOpenGL31 : IOpenGL30
    {
        void DrawArraysInstanced(PrimitiveType mode, int first, int count, int instancecount);
        void DrawElementsInstanced(PrimitiveType mode, int count, uint type, IntPtr indices, int instancecount);
        void TexBuffer(TextureTarget target, uint internalformat, uint buffer);
        void PrimitiveRestartIndex(uint index);
        void CopyBufferSubData(uint readTarget, uint writeTarget, IntPtr readOffset, IntPtr writeOffset, IntPtr size);
        void GetUniformIndices(uint program, int uniformCount, [In]string[] uniformNames, [Out]uint[] uniformIndices);
        void GetActiveUniformsiv(uint program, int uniformCount, [In]uint[] uniformIndices, uint pname, [Out]int[] @params);
        void GetActiveUniformName(uint program, uint uniformIndex, int bufSize, [Out]int[] length, ref string uniformName);
        uint GetUniformBlockIndex(uint program, [In]string uniformBlockName);
        void GetActiveUniformBlockiv(uint program, uint uniformBlockIndex, uint pname, [Out]int[] @params);
        void GetActiveUniformBlockName(uint program, uint uniformBlockIndex, int bufSize, [Out]int[] length, ref string uniformBlockName);
        void UniformBlockBinding(uint program, uint uniformBlockIndex, uint uniformBlockBinding);
    }
    public interface IOpenGL32 : IOpenGL31
    {
        void DrawElementsBaseVertex(PrimitiveType mode, int count, uint type, IntPtr indices, int basevertex);
        void DrawRangeElementsBaseVertex(PrimitiveType mode, uint start, uint end, int count, uint type, IntPtr indices, int basevertex);
        void DrawElementsInstancedBaseVertex(PrimitiveType mode, int count, uint type, IntPtr indices, int instancecount, int basevertex);
        void MultiDrawElementsBaseVertex(uint mode, [In]int[] count, uint type, [Out]IntPtr[] indices, int drawcount, [In]int[] basevertex);
        void ProvokingVertex(uint mode);
        IntPtr FenceSync(uint condition, uint flags);
        GLboolean IsSync(IntPtr sync);
        void DeleteSync(IntPtr sync);
        uint ClientWaitSync(IntPtr sync, uint flags, ulong timeout);
        void WaitSync(IntPtr sync, uint flags, ulong timeout);
        void GetInteger64v(uint pname, [Out]long[] data);
        void GetSynciv(IntPtr sync, uint pname, int bufSize, [Out]int[] length, [Out]int[] values);
        void GetInteger64i_v(uint target, uint index, [Out]long[] data);
        void GetBufferParameteri64v(uint target, uint pname, [Out]long[] @params);
        void FramebufferTexture(uint target, uint attachment, uint texture, int level);
        void TexImage2DMultisample(uint target, int samples, uint internalformat, int width, int height, GLboolean fixedsamplelocations);
        void TexImage3DMultisample(uint target, int samples, uint internalformat, int width, int height, int depth, GLboolean fixedsamplelocations);
        void GetMultisamplefv(uint pname, uint index, [Out]float[] val);
        void SampleMaski(uint maskNumber, uint mask);
    }
    public interface IOpenGL33 : IOpenGL32
    {
        void BindFragDataLocationIndexed(uint program, uint colorNumber, uint index, [In]string name);
        int GetFragDataIndex(uint program, [In]string name);
        void GenSamplers(int count, [Out]uint[] samplers);
        void DeleteSamplers(int count, [In]uint[] samplers);
        void DeleteSamplers(int count, IntPtr samplers);
        unsafe void DeleteSamplers(int count, uint* samplers);
        GLboolean IsSampler(uint sampler);
        void BindSampler(uint unit, uint sampler);
        void SamplerParameteri(uint sampler, uint pname, int param);
        void SamplerParameteriv(uint sampler, uint pname, [In]int[] param);
        void SamplerParameteriv(uint sampler, uint pname, IntPtr param);
        unsafe void SamplerParameteriv(uint sampler, uint pname, int* param);
        void SamplerParameterf(uint sampler, uint pname, float param);
        void SamplerParameterfv(uint sampler, uint pname, [In]float[] param);
        void SamplerParameterfv(uint sampler, uint pname, IntPtr param);
        unsafe void SamplerParameterfv(uint sampler, uint pname, float* param);
        void SamplerParameterIiv(uint sampler, uint pname, [In]int[] param);
        void SamplerParameterIiv(uint sampler, uint pname, IntPtr param);
        unsafe void SamplerParameterIiv(uint sampler, uint pname, int* param);
        void SamplerParameterIuiv(uint sampler, uint pname, [In]uint[] param);
        void SamplerParameterIuiv(uint sampler, uint pname, IntPtr param);
        unsafe void SamplerParameterIuiv(uint sampler, uint pname, uint* param);
        void GetSamplerParameteriv(uint sampler, uint pname, [Out]int[] @params);
        void GetSamplerParameterIiv(uint sampler, uint pname, [Out]int[] @params);
        void GetSamplerParameterfv(uint sampler, uint pname, [Out]float[] @params);
        void GetSamplerParameterIuiv(uint sampler, uint pname, [Out]uint[] @params);
        void QueryCounter(uint id, uint target);
        void GetQueryObjecti64v(uint id, uint pname, [Out]long[] @params);
        void GetQueryObjectui64v(uint id, uint pname, [Out]ulong[] @params);
        void VertexAttribDivisor(uint index, uint divisor);
        void VertexAttribP1ui(uint index, uint type, GLboolean normalized, uint value);
        void VertexAttribP1uiv(uint index, uint type, GLboolean normalized, [In]uint[] value);
        void VertexAttribP1uiv(uint index, uint type, GLboolean normalized, IntPtr value);
        unsafe void VertexAttribP1uiv(uint index, uint type, GLboolean normalized, uint* value);
        void VertexAttribP2ui(uint index, uint type, GLboolean normalized, uint value);
        void VertexAttribP2uiv(uint index, uint type, GLboolean normalized, [In]uint[] value);
        void VertexAttribP2uiv(uint index, uint type, GLboolean normalized, IntPtr value);
        unsafe void VertexAttribP2uiv(uint index, uint type, GLboolean normalized, uint* value);
        void VertexAttribP3ui(uint index, uint type, GLboolean normalized, uint value);
        void VertexAttribP3uiv(uint index, uint type, GLboolean normalized, [In]uint[] value);
        void VertexAttribP3uiv(uint index, uint type, GLboolean normalized, IntPtr value);
        unsafe void VertexAttribP3uiv(uint index, uint type, GLboolean normalized, uint* value);
        void VertexAttribP4ui(uint index, uint type, GLboolean normalized, uint value);
        void VertexAttribP4uiv(uint index, uint type, GLboolean normalized, [In]uint[] value);
        void VertexAttribP4uiv(uint index, uint type, GLboolean normalized, IntPtr value);
        unsafe void VertexAttribP4uiv(uint index, uint type, GLboolean normalized, uint* value);
        void VertexP2ui(uint type, uint value);
        void VertexP2uiv(uint type, [In]uint[] value);
        void VertexP2uiv(uint type, IntPtr value);
        unsafe void VertexP2uiv(uint type, uint* value);
        void VertexP3ui(uint type, uint value);
        void VertexP3uiv(uint type, [In]uint[] value);
        void VertexP3uiv(uint type, IntPtr value);
        unsafe void VertexP3uiv(uint type, uint* value);
        void VertexP4ui(uint type, uint value);
        void VertexP4uiv(uint type, [In]uint[] value);
        void VertexP4uiv(uint type, IntPtr value);
        unsafe void VertexP4uiv(uint type, uint* value);
        void TexCoordP1ui(uint type, uint coords);
        void TexCoordP1uiv(uint type, [In]uint[] coords);
        void TexCoordP1uiv(uint type, IntPtr coords);
        unsafe void TexCoordP1uiv(uint type, uint* coords);
        void TexCoordP2ui(uint type, uint coords);
        void TexCoordP2uiv(uint type, [In]uint[] coords);
        void TexCoordP2uiv(uint type, IntPtr coords);
        unsafe void TexCoordP2uiv(uint type, uint* coords);
        void TexCoordP3ui(uint type, uint coords);
        void TexCoordP3uiv(uint type, [In]uint[] coords);
        void TexCoordP3uiv(uint type, IntPtr coords);
        unsafe void TexCoordP3uiv(uint type, uint* coords);
        void TexCoordP4ui(uint type, uint coords);
        void TexCoordP4uiv(uint type, [In]uint[] coords);
        void TexCoordP4uiv(uint type, IntPtr coords);
        unsafe void TexCoordP4uiv(uint type, uint* coords);
        void MultiTexCoordP1ui(uint texture, uint type, uint coords);
        void MultiTexCoordP1uiv(uint texture, uint type, [In]uint[] coords);
        void MultiTexCoordP1uiv(uint texture, uint type, IntPtr coords);
        unsafe void MultiTexCoordP1uiv(uint texture, uint type, uint* coords);
        void MultiTexCoordP2ui(uint texture, uint type, uint coords);
        void MultiTexCoordP2uiv(uint texture, uint type, [In]uint[] coords);
        void MultiTexCoordP2uiv(uint texture, uint type, IntPtr coords);
        unsafe void MultiTexCoordP2uiv(uint texture, uint type, uint* coords);
        void MultiTexCoordP3ui(uint texture, uint type, uint coords);
        void MultiTexCoordP3uiv(uint texture, uint type, [In]uint[] coords);
        void MultiTexCoordP3uiv(uint texture, uint type, IntPtr coords);
        unsafe void MultiTexCoordP3uiv(uint texture, uint type, uint* coords);
        void MultiTexCoordP4ui(uint texture, uint type, uint coords);
        void MultiTexCoordP4uiv(uint texture, uint type, [In]uint[] coords);
        void MultiTexCoordP4uiv(uint texture, uint type, IntPtr coords);
        unsafe void MultiTexCoordP4uiv(uint texture, uint type, uint* coords);
        void NormalP3ui(uint type, uint coords);
        void NormalP3uiv(uint type, [In]uint[] coords);
        void NormalP3uiv(uint type, IntPtr coords);
        unsafe void NormalP3uiv(uint type, uint* coords);
        void ColorP3ui(uint type, uint color);
        void ColorP3uiv(uint type, [In]uint[] color);
        void ColorP3uiv(uint type, IntPtr color);
        unsafe void ColorP3uiv(uint type, uint* color);
        void ColorP4ui(uint type, uint color);
        void ColorP4uiv(uint type, [In]uint[] color);
        void ColorP4uiv(uint type, IntPtr color);
        unsafe void ColorP4uiv(uint type, uint* color);
        void SecondaryColorP3ui(uint type, uint color);
        void SecondaryColorP3uiv(uint type, [In]uint[] color);
        void SecondaryColorP3uiv(uint type, IntPtr color);
        unsafe void SecondaryColorP3uiv(uint type, uint* color);
    }
    public interface IOpenGL40 : IOpenGL33
    {
        void MinSampleShading(float value);
        void BlendEquationi(uint buf, uint mode);
        void BlendEquationSeparatei(uint buf, uint modeRGB, uint modeAlpha);
        void BlendFunci(uint buf, uint src, uint dst);
        void BlendFuncSeparatei(uint buf, uint srcRGB, uint dstRGB, uint srcAlpha, uint dstAlpha);
        void DrawArraysIndirect(PrimitiveType mode, IntPtr indirect);
        void DrawElementsIndirect(PrimitiveType mode, uint type, IntPtr indirect);
        void Uniform1d(int location, double x);
        void Uniform2d(int location, double x, double y);
        void Uniform3d(int location, double x, double y, double z);
        void Uniform4d(int location, double x, double y, double z, double w);
        void Uniform1dv(int location, int count, [In]double[] value);
        void Uniform1dv(int location, int count, IntPtr value);
        unsafe void Uniform1dv(int location, int count, double* value);
        void Uniform2dv(int location, int count, [In]double[] value);
        void Uniform2dv(int location, int count, IntPtr value);
        unsafe void Uniform2dv(int location, int count, double* value);
        void Uniform3dv(int location, int count, [In]double[] value);
        void Uniform3dv(int location, int count, IntPtr value);
        unsafe void Uniform3dv(int location, int count, double* value);
        void Uniform4dv(int location, int count, [In]double[] value);
        void Uniform4dv(int location, int count, IntPtr value);
        unsafe void Uniform4dv(int location, int count, double* value);
        void UniformMatrix2dv(int location, int count, GLboolean transpose, [In]double[] value);
        void UniformMatrix2dv(int location, int count, GLboolean transpose, IntPtr value);
        unsafe void UniformMatrix2dv(int location, int count, GLboolean transpose, double* value);
        void UniformMatrix3dv(int location, int count, GLboolean transpose, [In]double[] value);
        void UniformMatrix3dv(int location, int count, GLboolean transpose, IntPtr value);
        unsafe void UniformMatrix3dv(int location, int count, GLboolean transpose, double* value);
        void UniformMatrix4dv(int location, int count, GLboolean transpose, [In]double[] value);
        void UniformMatrix4dv(int location, int count, GLboolean transpose, IntPtr value);
        unsafe void UniformMatrix4dv(int location, int count, GLboolean transpose, double* value);
        void UniformMatrix2x3dv(int location, int count, GLboolean transpose, [In]double[] value);
        void UniformMatrix2x3dv(int location, int count, GLboolean transpose, IntPtr value);
        unsafe void UniformMatrix2x3dv(int location, int count, GLboolean transpose, double* value);
        void UniformMatrix2x4dv(int location, int count, GLboolean transpose, [In]double[] value);
        void UniformMatrix2x4dv(int location, int count, GLboolean transpose, IntPtr value);
        unsafe void UniformMatrix2x4dv(int location, int count, GLboolean transpose, double* value);
        void UniformMatrix3x2dv(int location, int count, GLboolean transpose, [In]double[] value);
        void UniformMatrix3x2dv(int location, int count, GLboolean transpose, IntPtr value);
        unsafe void UniformMatrix3x2dv(int location, int count, GLboolean transpose, double* value);
        void UniformMatrix3x4dv(int location, int count, GLboolean transpose, [In]double[] value);
        void UniformMatrix3x4dv(int location, int count, GLboolean transpose, IntPtr value);
        unsafe void UniformMatrix3x4dv(int location, int count, GLboolean transpose, double* value);
        void UniformMatrix4x2dv(int location, int count, GLboolean transpose, [In]double[] value);
        void UniformMatrix4x2dv(int location, int count, GLboolean transpose, IntPtr value);
        unsafe void UniformMatrix4x2dv(int location, int count, GLboolean transpose, double* value);
        void UniformMatrix4x3dv(int location, int count, GLboolean transpose, [In]double[] value);
        void UniformMatrix4x3dv(int location, int count, GLboolean transpose, IntPtr value);
        unsafe void UniformMatrix4x3dv(int location, int count, GLboolean transpose, double* value);
        void GetUniformdv(uint program, int location, [Out]double[] @params);
        int GetSubroutineUniformLocation(uint program, uint shadertype, [In]string name);
        uint GetSubroutineIndex(uint program, uint shadertype, [In]string name);
        void GetActiveSubroutineUniformiv(uint program, uint shadertype, uint index, uint pname, [Out]int[] values);
        void GetActiveSubroutineUniformName(uint program, uint shadertype, uint index, int bufsize, [Out]int[] length, ref string name);
        void GetActiveSubroutineName(uint program, uint shadertype, uint index, int bufsize, [Out]int[] length, ref string name);
        void UniformSubroutinesuiv(uint shadertype, int count, [In]uint[] indices);
        void UniformSubroutinesuiv(uint shadertype, int count, IntPtr indices);
        unsafe void UniformSubroutinesuiv(uint shadertype, int count, uint* indices);
        void GetUniformSubroutineuiv(uint shadertype, int location, [Out]uint[] @params);
        void GetProgramStageiv(uint program, uint shadertype, uint pname, [Out]int[] values);
        void PatchParameteri(uint pname, int value);
        void PatchParameterfv(uint pname, [In]float[] values);
        void PatchParameterfv(uint pname, IntPtr values);
        unsafe void PatchParameterfv(uint pname, float* values);
        void BindTransformFeedback(uint target, uint id);
        void DeleteTransformFeedbacks(int n, [In]uint[] ids);
        void DeleteTransformFeedbacks(int n, IntPtr ids);
        unsafe void DeleteTransformFeedbacks(int n, uint* ids);
        void GenTransformFeedbacks(int n, [Out]uint[] ids);
        GLboolean IsTransformFeedback(uint id);
        void PauseTransformFeedback();
        void ResumeTransformFeedback();
        void DrawTransformFeedback(PrimitiveType mode, uint id);
        void DrawTransformFeedbackStream(PrimitiveType mode, uint id, uint stream);
        void BeginQueryIndexed(uint target, uint index, uint id);
        void EndQueryIndexed(uint target, uint index);
        void GetQueryIndexediv(uint target, uint index, uint pname, [Out]int[] @params);
    }
    public interface IOpenGL41 : IOpenGL40
    {
        void ReleaseShaderCompiler();
        void ShaderBinary(int count, [In]uint[] shaders, uint binaryformat, IntPtr binary, int length);
        void GetShaderPrecisionFormat(uint shadertype, uint precisiontype, [Out]int[] range, [Out]int[] precision);
        void DepthRangef(float n, float f);
        void ClearDepthf(float d);
        void GetProgramBinary(uint program, int bufSize, [Out]int[] length, [Out]uint[] binaryFormat, IntPtr binary);
        void ProgramBinary(uint program, uint binaryFormat, IntPtr binary, int length);
        void ProgramParameteri(uint program, uint pname, int value);
        void UseProgramStages(uint pipeline, uint stages, uint program);
        void ActiveShaderProgram(uint pipeline, uint program);
        uint CreateShaderProgramv(uint type, int count, [In]string[] strings);
        void BindProgramPipeline(uint pipeline);
        void DeleteProgramPipelines(int n, [In]uint[] pipelines);
        void DeleteProgramPipelines(int n, IntPtr pipelines);
        unsafe void DeleteProgramPipelines(int n, uint* pipelines);
        void GenProgramPipelines(int n, [Out]uint[] pipelines);
        GLboolean IsProgramPipeline(uint pipeline);
        void GetProgramPipelineiv(uint pipeline, uint pname, [Out]int[] @params);
        void ProgramUniform1i(uint program, int location, int v0);
        void ProgramUniform1iv(uint program, int location, int count, [In]int[] value);
        void ProgramUniform1iv(uint program, int location, int count, IntPtr value);
        unsafe void ProgramUniform1iv(uint program, int location, int count, int* value);
        void ProgramUniform1f(uint program, int location, float v0);
        void ProgramUniform1fv(uint program, int location, int count, [In]float[] value);
        void ProgramUniform1fv(uint program, int location, int count, IntPtr value);
        unsafe void ProgramUniform1fv(uint program, int location, int count, float* value);
        void ProgramUniform1d(uint program, int location, double v0);
        void ProgramUniform1dv(uint program, int location, int count, [In]double[] value);
        void ProgramUniform1dv(uint program, int location, int count, IntPtr value);
        unsafe void ProgramUniform1dv(uint program, int location, int count, double* value);
        void ProgramUniform1ui(uint program, int location, uint v0);
        void ProgramUniform1uiv(uint program, int location, int count, [In]uint[] value);
        void ProgramUniform1uiv(uint program, int location, int count, IntPtr value);
        unsafe void ProgramUniform1uiv(uint program, int location, int count, uint* value);
        void ProgramUniform2i(uint program, int location, int v0, int v1);
        void ProgramUniform2iv(uint program, int location, int count, [In]int[] value);
        void ProgramUniform2iv(uint program, int location, int count, IntPtr value);
        unsafe void ProgramUniform2iv(uint program, int location, int count, int* value);
        void ProgramUniform2f(uint program, int location, float v0, float v1);
        void ProgramUniform2fv(uint program, int location, int count, [In]float[] value);
        void ProgramUniform2fv(uint program, int location, int count, IntPtr value);
        unsafe void ProgramUniform2fv(uint program, int location, int count, float* value);
        void ProgramUniform2d(uint program, int location, double v0, double v1);
        void ProgramUniform2dv(uint program, int location, int count, [In]double[] value);
        void ProgramUniform2dv(uint program, int location, int count, IntPtr value);
        unsafe void ProgramUniform2dv(uint program, int location, int count, double* value);
        void ProgramUniform2ui(uint program, int location, uint v0, uint v1);
        void ProgramUniform2uiv(uint program, int location, int count, [In]uint[] value);
        void ProgramUniform2uiv(uint program, int location, int count, IntPtr value);
        unsafe void ProgramUniform2uiv(uint program, int location, int count, uint* value);
        void ProgramUniform3i(uint program, int location, int v0, int v1, int v2);
        void ProgramUniform3iv(uint program, int location, int count, [In]int[] value);
        void ProgramUniform3iv(uint program, int location, int count, IntPtr value);
        unsafe void ProgramUniform3iv(uint program, int location, int count, int* value);
        void ProgramUniform3f(uint program, int location, float v0, float v1, float v2);
        void ProgramUniform3fv(uint program, int location, int count, [In]float[] value);
        void ProgramUniform3fv(uint program, int location, int count, IntPtr value);
        unsafe void ProgramUniform3fv(uint program, int location, int count, float* value);
        void ProgramUniform3d(uint program, int location, double v0, double v1, double v2);
        void ProgramUniform3dv(uint program, int location, int count, [In]double[] value);
        void ProgramUniform3dv(uint program, int location, int count, IntPtr value);
        unsafe void ProgramUniform3dv(uint program, int location, int count, double* value);
        void ProgramUniform3ui(uint program, int location, uint v0, uint v1, uint v2);
        void ProgramUniform3uiv(uint program, int location, int count, [In]uint[] value);
        void ProgramUniform3uiv(uint program, int location, int count, IntPtr value);
        unsafe void ProgramUniform3uiv(uint program, int location, int count, uint* value);
        void ProgramUniform4i(uint program, int location, int v0, int v1, int v2, int v3);
        void ProgramUniform4iv(uint program, int location, int count, [In]int[] value);
        void ProgramUniform4iv(uint program, int location, int count, IntPtr value);
        unsafe void ProgramUniform4iv(uint program, int location, int count, int* value);
        void ProgramUniform4f(uint program, int location, float v0, float v1, float v2, float v3);
        void ProgramUniform4fv(uint program, int location, int count, [In]float[] value);
        void ProgramUniform4fv(uint program, int location, int count, IntPtr value);
        unsafe void ProgramUniform4fv(uint program, int location, int count, float* value);
        void ProgramUniform4d(uint program, int location, double v0, double v1, double v2, double v3);
        void ProgramUniform4dv(uint program, int location, int count, [In]double[] value);
        void ProgramUniform4dv(uint program, int location, int count, IntPtr value);
        unsafe void ProgramUniform4dv(uint program, int location, int count, double* value);
        void ProgramUniform4ui(uint program, int location, uint v0, uint v1, uint v2, uint v3);
        void ProgramUniform4uiv(uint program, int location, int count, [In]uint[] value);
        void ProgramUniform4uiv(uint program, int location, int count, IntPtr value);
        unsafe void ProgramUniform4uiv(uint program, int location, int count, uint* value);
        void ProgramUniformMatrix2fv(uint program, int location, int count, GLboolean transpose, [In]float[] value);
        void ProgramUniformMatrix2fv(uint program, int location, int count, GLboolean transpose, IntPtr value);
        unsafe void ProgramUniformMatrix2fv(uint program, int location, int count, GLboolean transpose, float* value);
        void ProgramUniformMatrix3fv(uint program, int location, int count, GLboolean transpose, [In]float[] value);
        void ProgramUniformMatrix3fv(uint program, int location, int count, GLboolean transpose, IntPtr value);
        unsafe void ProgramUniformMatrix3fv(uint program, int location, int count, GLboolean transpose, float* value);
        void ProgramUniformMatrix4fv(uint program, int location, int count, GLboolean transpose, [In]float[] value);
        void ProgramUniformMatrix4fv(uint program, int location, int count, GLboolean transpose, IntPtr value);
        unsafe void ProgramUniformMatrix4fv(uint program, int location, int count, GLboolean transpose, float* value);
        void ProgramUniformMatrix2dv(uint program, int location, int count, GLboolean transpose, [In]double[] value);
        void ProgramUniformMatrix2dv(uint program, int location, int count, GLboolean transpose, IntPtr value);
        unsafe void ProgramUniformMatrix2dv(uint program, int location, int count, GLboolean transpose, double* value);
        void ProgramUniformMatrix3dv(uint program, int location, int count, GLboolean transpose, [In]double[] value);
        void ProgramUniformMatrix3dv(uint program, int location, int count, GLboolean transpose, IntPtr value);
        unsafe void ProgramUniformMatrix3dv(uint program, int location, int count, GLboolean transpose, double* value);
        void ProgramUniformMatrix4dv(uint program, int location, int count, GLboolean transpose, [In]double[] value);
        void ProgramUniformMatrix4dv(uint program, int location, int count, GLboolean transpose, IntPtr value);
        unsafe void ProgramUniformMatrix4dv(uint program, int location, int count, GLboolean transpose, double* value);
        void ProgramUniformMatrix2x3fv(uint program, int location, int count, GLboolean transpose, [In]float[] value);
        void ProgramUniformMatrix2x3fv(uint program, int location, int count, GLboolean transpose, IntPtr value);
        unsafe void ProgramUniformMatrix2x3fv(uint program, int location, int count, GLboolean transpose, float* value);
        void ProgramUniformMatrix3x2fv(uint program, int location, int count, GLboolean transpose, [In]float[] value);
        void ProgramUniformMatrix3x2fv(uint program, int location, int count, GLboolean transpose, IntPtr value);
        unsafe void ProgramUniformMatrix3x2fv(uint program, int location, int count, GLboolean transpose, float* value);
        void ProgramUniformMatrix2x4fv(uint program, int location, int count, GLboolean transpose, [In]float[] value);
        void ProgramUniformMatrix2x4fv(uint program, int location, int count, GLboolean transpose, IntPtr value);
        unsafe void ProgramUniformMatrix2x4fv(uint program, int location, int count, GLboolean transpose, float* value);
        void ProgramUniformMatrix4x2fv(uint program, int location, int count, GLboolean transpose, [In]float[] value);
        void ProgramUniformMatrix4x2fv(uint program, int location, int count, GLboolean transpose, IntPtr value);
        unsafe void ProgramUniformMatrix4x2fv(uint program, int location, int count, GLboolean transpose, float* value);
        void ProgramUniformMatrix3x4fv(uint program, int location, int count, GLboolean transpose, [In]float[] value);
        void ProgramUniformMatrix3x4fv(uint program, int location, int count, GLboolean transpose, IntPtr value);
        unsafe void ProgramUniformMatrix3x4fv(uint program, int location, int count, GLboolean transpose, float* value);
        void ProgramUniformMatrix4x3fv(uint program, int location, int count, GLboolean transpose, [In]float[] value);
        void ProgramUniformMatrix4x3fv(uint program, int location, int count, GLboolean transpose, IntPtr value);
        unsafe void ProgramUniformMatrix4x3fv(uint program, int location, int count, GLboolean transpose, float* value);
        void ProgramUniformMatrix2x3dv(uint program, int location, int count, GLboolean transpose, [In]double[] value);
        void ProgramUniformMatrix2x3dv(uint program, int location, int count, GLboolean transpose, IntPtr value);
        unsafe void ProgramUniformMatrix2x3dv(uint program, int location, int count, GLboolean transpose, double* value);
        void ProgramUniformMatrix3x2dv(uint program, int location, int count, GLboolean transpose, [In]double[] value);
        void ProgramUniformMatrix3x2dv(uint program, int location, int count, GLboolean transpose, IntPtr value);
        unsafe void ProgramUniformMatrix3x2dv(uint program, int location, int count, GLboolean transpose, double* value);
        void ProgramUniformMatrix2x4dv(uint program, int location, int count, GLboolean transpose, [In]double[] value);
        void ProgramUniformMatrix2x4dv(uint program, int location, int count, GLboolean transpose, IntPtr value);
        unsafe void ProgramUniformMatrix2x4dv(uint program, int location, int count, GLboolean transpose, double* value);
        void ProgramUniformMatrix4x2dv(uint program, int location, int count, GLboolean transpose, [In]double[] value);
        void ProgramUniformMatrix4x2dv(uint program, int location, int count, GLboolean transpose, IntPtr value);
        unsafe void ProgramUniformMatrix4x2dv(uint program, int location, int count, GLboolean transpose, double* value);
        void ProgramUniformMatrix3x4dv(uint program, int location, int count, GLboolean transpose, [In]double[] value);
        void ProgramUniformMatrix3x4dv(uint program, int location, int count, GLboolean transpose, IntPtr value);
        unsafe void ProgramUniformMatrix3x4dv(uint program, int location, int count, GLboolean transpose, double* value);
        void ProgramUniformMatrix4x3dv(uint program, int location, int count, GLboolean transpose, [In]double[] value);
        void ProgramUniformMatrix4x3dv(uint program, int location, int count, GLboolean transpose, IntPtr value);
        unsafe void ProgramUniformMatrix4x3dv(uint program, int location, int count, GLboolean transpose, double* value);
        void ValidateProgramPipeline(uint pipeline);
        void GetProgramPipelineInfoLog(uint pipeline, int bufSize, [Out]int[] length, ref string infoLog);
        void VertexAttribL1d(uint index, double x);
        void VertexAttribL2d(uint index, double x, double y);
        void VertexAttribL3d(uint index, double x, double y, double z);
        void VertexAttribL4d(uint index, double x, double y, double z, double w);
        void VertexAttribL1dv(uint index, [In]double[] v);
        void VertexAttribL1dv(uint index, IntPtr v);
        unsafe void VertexAttribL1dv(uint index, double* v);
        void VertexAttribL2dv(uint index, [In]double[] v);
        void VertexAttribL2dv(uint index, IntPtr v);
        unsafe void VertexAttribL2dv(uint index, double* v);
        void VertexAttribL3dv(uint index, [In]double[] v);
        void VertexAttribL3dv(uint index, IntPtr v);
        unsafe void VertexAttribL3dv(uint index, double* v);
        void VertexAttribL4dv(uint index, [In]double[] v);
        void VertexAttribL4dv(uint index, IntPtr v);
        unsafe void VertexAttribL4dv(uint index, double* v);
        void VertexAttribLPointer(uint index, int size, uint type, int stride, IntPtr pointer);
        void GetVertexAttribLdv(uint index, uint pname, [Out]double[] @params);
        void ViewportArrayv(uint first, int count, [In]float[] v);
        void ViewportArrayv(uint first, int count, IntPtr v);
        unsafe void ViewportArrayv(uint first, int count, float* v);
        void ViewportIndexedf(uint index, float x, float y, float w, float h);
        void ViewportIndexedfv(uint index, [In]float[] v);
        void ViewportIndexedfv(uint index, IntPtr v);
        unsafe void ViewportIndexedfv(uint index, float* v);
        void ScissorArrayv(uint first, int count, [In]int[] v);
        void ScissorArrayv(uint first, int count, IntPtr v);
        unsafe void ScissorArrayv(uint first, int count, int* v);
        void ScissorIndexed(uint index, int left, int bottom, int width, int height);
        void ScissorIndexedv(uint index, [In]int[] v);
        void ScissorIndexedv(uint index, IntPtr v);
        unsafe void ScissorIndexedv(uint index, int* v);
        void DepthRangeArrayv(uint first, int count, [In]double[] v);
        void DepthRangeArrayv(uint first, int count, IntPtr v);
        unsafe void DepthRangeArrayv(uint first, int count, double* v);
        void DepthRangeIndexed(uint index, double n, double f);
        void GetFloati_v(uint target, uint index, [Out]float[] data);
        void GetDoublei_v(uint target, uint index, [Out]double[] data);
    }
    public interface IOpenGL42 : IOpenGL41
    {
        void DrawArraysInstancedBaseInstance(PrimitiveType mode, int first, int count, int instancecount, uint baseinstance);
        void DrawElementsInstancedBaseInstance(PrimitiveType mode, int count, uint type, IntPtr indices, int instancecount, uint baseinstance);
        void DrawElementsInstancedBaseVertexBaseInstance(PrimitiveType mode, int count, uint type, IntPtr indices, int instancecount, int basevertex, uint baseinstance);
        void GetInternalformativ(uint target, uint internalformat, uint pname, int bufSize, [Out]int[] @params);
        void GetActiveAtomicCounterBufferiv(uint program, uint bufferIndex, uint pname, [Out]int[] @params);
        void BindImageTexture(uint unit, uint texture, int level, GLboolean layered, int layer, uint access, uint format);
        void MemoryBarrier(uint barriers);
        void TexStorage1D(uint target, int levels, uint internalformat, int width);
        void TexStorage2D(uint target, int levels, uint internalformat, int width, int height);
        void TexStorage3D(uint target, int levels, uint internalformat, int width, int height, int depth);
        void DrawTransformFeedbackInstanced(PrimitiveType mode, uint id, int instancecount);
        void DrawTransformFeedbackStreamInstanced(PrimitiveType mode, uint id, uint stream, int instancecount);
    }
    public interface IOpenGL43 : IOpenGL42
    {
        void ClearBufferData(uint target, uint internalformat, uint format, uint type, IntPtr data);
        void ClearBufferSubData(uint target, uint internalformat, IntPtr offset, IntPtr size, uint format, uint type, IntPtr data);
        void DispatchCompute(uint num_groups_x, uint num_groups_y, uint num_groups_z);
        void DispatchComputeIndirect(IntPtr indirect);
        void CopyImageSubData(uint srcName, uint srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, uint dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth);
        void FramebufferParameteri(uint target, uint pname, int param);
        void GetFramebufferParameteriv(uint target, uint pname, [Out]int[] @params);
        void GetInternalformati64v(uint target, uint internalformat, uint pname, int bufSize, [Out]long[] @params);
        void InvalidateTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth);
        void InvalidateTexImage(uint texture, int level);
        void InvalidateBufferSubData(uint buffer, IntPtr offset, IntPtr length);
        void InvalidateBufferData(uint buffer);
        void InvalidateFramebuffer(uint target, int numAttachments, [In]uint[] attachments);
        void InvalidateFramebuffer(uint target, int numAttachments, IntPtr attachments);
        unsafe void InvalidateFramebuffer(uint target, int numAttachments, uint* attachments);
        void InvalidateSubFramebuffer(uint target, int numAttachments, [In]uint[] attachments, int x, int y, int width, int height);
        void MultiDrawArraysIndirect(uint mode, IntPtr indirect, int drawcount, int stride);
        void MultiDrawElementsIndirect(uint mode, uint type, IntPtr indirect, int drawcount, int stride);
        void GetProgramInterfaceiv(uint program, uint programInterface, uint pname, [Out]int[] @params);
        uint GetProgramResourceIndex(uint program, uint programInterface, [In]string name);
        void GetProgramResourceName(uint program, uint programInterface, uint index, int bufSize, [Out]int[] length, ref string name);
        void GetProgramResourceiv(uint program, uint programInterface, uint index, int propCount, [In]uint[] props, int bufSize, [Out]int[] length, [Out]int[] @params);
        int GetProgramResourceLocation(uint program, uint programInterface, [In]string name);
        int GetProgramResourceLocationIndex(uint program, uint programInterface, [In]string name);
        void ShaderStorageBlockBinding(uint program, uint storageBlockIndex, uint storageBlockBinding);
        void TexBufferRange(uint target, uint internalformat, uint buffer, IntPtr offset, IntPtr size);
        void TexStorage2DMultisample(uint target, int samples, uint internalformat, int width, int height, GLboolean fixedsamplelocations);
        void TexStorage3DMultisample(uint target, int samples, uint internalformat, int width, int height, int depth, GLboolean fixedsamplelocations);
        void TextureView(uint texture, uint target, uint origtexture, uint internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers);
        void BindVertexBuffer(uint bindingindex, uint buffer, IntPtr offset, int stride);
        void VertexAttribFormat(uint attribindex, int size, uint type, GLboolean normalized, uint relativeoffset);
        void VertexAttribIFormat(uint attribindex, int size, uint type, uint relativeoffset);
        void VertexAttribLFormat(uint attribindex, int size, uint type, uint relativeoffset);
        void VertexAttribBinding(uint attribindex, uint bindingindex);
        void VertexBindingDivisor(uint bindingindex, uint divisor);
        void DebugMessageControl(uint source, uint type, uint severity, int count, [In]uint[] ids, GLboolean enabled);
        void DebugMessageInsert(uint source, uint type, uint id, uint severity, int length, [In]string buf);
        void DebugMessageCallback(GLDEBUGPROC callback, IntPtr userParam);
        uint GetDebugMessageLog(uint count, int bufSize, [Out]uint[] sources, [Out]uint[] types, [Out]uint[] ids, [Out]uint[] severities, [Out]int[] lengths, ref string messageLog);
        void PushDebugGroup(uint source, uint id, int length, [In]string message);
        void PopDebugGroup();
        void ObjectLabel(uint identifier, uint name, int length, [In]string label);
        void GetObjectLabel(uint identifier, uint name, int bufSize, [Out]int[] length, ref string label);
        void ObjectPtrLabel(IntPtr ptr, int length, [In]string label);
        void GetObjectPtrLabel(IntPtr ptr, int bufSize, [Out]int[] length, ref string label);
    }
    public interface IOpenGL44 : IOpenGL43
    {
        void BufferStorage(uint target, IntPtr size, IntPtr data, uint flags);
        void ClearTexImage(uint texture, int level, uint format, uint type, IntPtr data);
        void ClearTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, IntPtr data);
        void BindBuffersBase(uint target, uint first, int count, [In]uint[] buffers);
        void BindBuffersBase(uint target, uint first, int count, IntPtr buffers);
        unsafe void BindBuffersBase(uint target, uint first, int count, uint* buffers);
        void BindBuffersRange(uint target, uint first, int count, [In]uint[] buffers, [In]IntPtr[] offsets, [In]IntPtr[] sizes);
        void BindTextures(uint first, int count, [In]uint[] textures);
        void BindTextures(uint first, int count, IntPtr textures);
        unsafe void BindTextures(uint first, int count, uint* textures);
        void BindSamplers(uint first, int count, [In]uint[] samplers);
        void BindSamplers(uint first, int count, IntPtr samplers);
        unsafe void BindSamplers(uint first, int count, uint* samplers);
        void BindImageTextures(uint first, int count, [In]uint[] textures);
        void BindImageTextures(uint first, int count, IntPtr textures);
        unsafe void BindImageTextures(uint first, int count, uint* textures);
        void BindVertexBuffers(uint first, int count, [In]uint[] buffers, [In]IntPtr[] offsets, [In]int[] strides);
    }
    public interface IVersionEsCm10
    {
        void ClearColor(float red, float green, float blue, float alpha);
        void ClearDepthf(float d);
        void ClipPlanef(uint p, [In]float[] eqn);
        void ClipPlanef(uint p, IntPtr eqn);
        unsafe void ClipPlanef(uint p, float* eqn);
        void DepthRangef(float n, float f);
        void Frustumf(float l, float r, float b, float t, float n, float f);
        void GetClipPlanef(uint plane, [Out]float[] equation);
        void GetFloatv(GetPName pname, [Out]float[] data);
        void GetTexParameterfv(TextureTarget target, GetTextureParameter pname, [Out]float[] @params);
        void LineWidth(float width);
        void Orthof(float l, float r, float b, float t, float n, float f);
        void PointParameterf(uint pname, float param);
        void PointParameterfv(uint pname, [In]float[] @params);
        void PointParameterfv(uint pname, IntPtr @params);
        unsafe void PointParameterfv(uint pname, float* @params);
        void PointSize(float size);
        void PolygonOffset(float factor, float units);
        void TexParameterf(TextureTarget target, TextureParameterName pname, float param);
        void TexParameterfv(TextureTarget target, TextureParameterName pname, [In]float[] @params);
        void TexParameterfv(TextureTarget target, TextureParameterName pname, IntPtr @params);
        unsafe void TexParameterfv(TextureTarget target, TextureParameterName pname, float* @params);
        void ActiveTexture(uint texture);
        void AlphaFuncx(uint func, int @ref);
        void BindBuffer(uint target, uint buffer);
        void BindTexture(TextureTarget target, uint texture);
        void BlendFunc(BlendingFactorSrc sfactor, BlendingFactorDest dfactor);
        void BufferData(uint target, IntPtr size, IntPtr data, uint usage);
        void BufferSubData(uint target, IntPtr offset, IntPtr size, IntPtr data);
        void Clear(uint mask);
        void ClearColorx(int red, int green, int blue, int alpha);
        void ClearDepthx(int depth);
        void ClearStencil(int s);
        void ClipPlanex(uint plane, [In]int[] equation);
        void ClipPlanex(uint plane, IntPtr equation);
        unsafe void ClipPlanex(uint plane, int* equation);
        void Color4x(int red, int green, int blue, int alpha);
        void ColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
        void CompressedTexImage2D(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, IntPtr data);
        void CompressedTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, IntPtr data);
        void CopyTexImage2D(TextureTarget target, int level, InternalFormat internalformat, int x, int y, int width, int height, int border);
        void CopyTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height);
        void CullFace(CullFaceMode mode);
        void DeleteBuffers(int n, [In]uint[] buffers);
        void DeleteBuffers(int n, IntPtr buffers);
        unsafe void DeleteBuffers(int n, uint* buffers);
        void DeleteTextures(int n, [In]uint[] textures);
        void DeleteTextures(int n, IntPtr textures);
        unsafe void DeleteTextures(int n, uint* textures);
        void DepthFunc(DepthFunction func);
        void DepthMask(GLboolean flag);
        void DepthRangex(int n, int f);
        void Disable(EnableCap cap);
        void DrawArrays(PrimitiveType mode, int first, int count);
        void DrawElements(PrimitiveType mode, int count, uint type, IntPtr indices);
        void Enable(EnableCap cap);
        void Finish();
        void Flush();
        void Fogx(uint pname, int param);
        void Fogxv(uint pname, [In]int[] param);
        void Fogxv(uint pname, IntPtr param);
        unsafe void Fogxv(uint pname, int* param);
        void FrontFace(FrontFaceDirection mode);
        void Frustumx(int l, int r, int b, int t, int n, int f);
        void GetBooleanv(GetPName pname, [Out]GLboolean data);
        void GetBufferParameteriv(uint target, uint pname, [Out]int[] @params);
        void GetClipPlanex(uint plane, [Out]int[] equation);
        void GenBuffers(int n, [Out]uint[] buffers);
        void GenTextures(int n, [Out]uint[] textures);
        ErrorCode GetError();
        void GetFixedv(uint pname, [Out]int[] @params);
        void GetIntegerv(GetPName pname, [Out]int[] data);
        void GetLightxv(uint light, uint pname, [Out]int[] @params);
        void GetMaterialxv(uint face, uint pname, [Out]int[] @params);
        [return: MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstStringReturnMarshaller))]
        string GetString(StringName name);
        void GetTexEnvxv(uint target, uint pname, [Out]int[] @params);
        void GetTexParameteriv(TextureTarget target, GetTextureParameter pname, [Out]int[] @params);
        void GetTexParameterxv(uint target, uint pname, [Out]int[] @params);
        void Hint(HintTarget target, HintMode mode);
        GLboolean IsBuffer(uint buffer);
        GLboolean IsEnabled(EnableCap cap);
        GLboolean IsTexture(uint texture);
        void LightModelx(uint pname, int param);
        void LightModelxv(uint pname, [In]int[] param);
        void LightModelxv(uint pname, IntPtr param);
        unsafe void LightModelxv(uint pname, int* param);
        void Lightx(uint light, uint pname, int param);
        void Lightxv(uint light, uint pname, [In]int[] @params);
        void Lightxv(uint light, uint pname, IntPtr @params);
        unsafe void Lightxv(uint light, uint pname, int* @params);
        void LineWidthx(int width);
        void LoadMatrixx([In]int[] m);
        void LoadMatrixx(IntPtr m);
        unsafe void LoadMatrixx(int* m);
        void LogicOp(LogicOp opcode);
        void Materialx(uint face, uint pname, int param);
        void Materialxv(uint face, uint pname, [In]int[] param);
        void Materialxv(uint face, uint pname, IntPtr param);
        unsafe void Materialxv(uint face, uint pname, int* param);
        void MultMatrixx([In]int[] m);
        void MultMatrixx(IntPtr m);
        unsafe void MultMatrixx(int* m);
        void MultiTexCoord4x(uint texture, int s, int t, int r, int q);
        void Normal3x(int nx, int ny, int nz);
        void Orthox(int l, int r, int b, int t, int n, int f);
        void PixelStorei(PixelStoreParameter pname, int param);
        void PointParameterx(uint pname, int param);
        void PointParameterxv(uint pname, [In]int[] @params);
        void PointParameterxv(uint pname, IntPtr @params);
        unsafe void PointParameterxv(uint pname, int* @params);
        void PointSizex(int size);
        void PolygonOffsetx(int factor, int units);
        void ReadPixels(int x, int y, int width, int height, PixelFormat format, PixelType type, IntPtr pixels);
        void Rotatex(int angle, int x, int y, int z);
        void SampleCoverage(float value, GLboolean invert);
        void SampleCoveragex(int value, GLboolean invert);
        void Scalex(int x, int y, int z);
        void Scissor(int x, int y, int width, int height);
        void StencilFunc(StencilFunction func, int @ref, uint mask);
        void StencilMask(uint mask);
        void StencilOp(StencilOp fail, StencilOp zfail, StencilOp zpass);
        void TexEnvx(uint target, uint pname, int param);
        void TexEnvxv(uint target, uint pname, [In]int[] @params);
        void TexEnvxv(uint target, uint pname, IntPtr @params);
        unsafe void TexEnvxv(uint target, uint pname, int* @params);
        void TexImage2D(TextureTarget target, int level, int internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels);
        void TexParameteri(TextureTarget target, TextureParameterName pname, int param);
        void TexParameterx(uint target, uint pname, int param);
        void TexParameteriv(TextureTarget target, TextureParameterName pname, [In]int[] @params);
        void TexParameteriv(TextureTarget target, TextureParameterName pname, IntPtr @params);
        unsafe void TexParameteriv(TextureTarget target, TextureParameterName pname, int* @params);
        void TexParameterxv(uint target, uint pname, [In]int[] @params);
        void TexParameterxv(uint target, uint pname, IntPtr @params);
        unsafe void TexParameterxv(uint target, uint pname, int* @params);
        void TexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels);
        void Translatex(int x, int y, int z);
        void Viewport(int x, int y, int width, int height);
    }
    public interface IEsVersion20
    {
        void ActiveTexture(uint texture);
        void AttachShader(uint program, uint shader);
        void BindAttribLocation(uint program, uint index, [In]string name);
        void BindBuffer(uint target, uint buffer);
        void BindFramebuffer(uint target, uint framebuffer);
        void BindRenderbuffer(uint target, uint renderbuffer);
        void BindTexture(TextureTarget target, uint texture);
        void BlendColor(float red, float green, float blue, float alpha);
        void BlendEquation(uint mode);
        void BlendEquationSeparate(uint modeRGB, uint modeAlpha);
        void BlendFunc(BlendingFactorSrc sfactor, BlendingFactorDest dfactor);
        void BlendFuncSeparate(uint sfactorRGB, uint dfactorRGB, uint sfactorAlpha, uint dfactorAlpha);
        void BufferData(uint target, IntPtr size, IntPtr data, uint usage);
        void BufferSubData(uint target, IntPtr offset, IntPtr size, IntPtr data);
        uint CheckFramebufferStatus(uint target);
        void Clear(uint mask);
        void ClearColor(float red, float green, float blue, float alpha);
        void ClearDepthf(float d);
        void ClearStencil(int s);
        void ColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
        void CompileShader(uint shader);
        void CompressedTexImage2D(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, IntPtr data);
        void CompressedTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, IntPtr data);
        void CopyTexImage2D(TextureTarget target, int level, InternalFormat internalformat, int x, int y, int width, int height, int border);
        void CopyTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height);
        uint CreateProgram();
        uint CreateShader(uint type);
        void CullFace(CullFaceMode mode);
        void DeleteBuffers(int n, [In]uint[] buffers);
        void DeleteBuffers(int n, IntPtr buffers);
        unsafe void DeleteBuffers(int n, uint* buffers);
        void DeleteFramebuffers(int n, [In]uint[] framebuffers);
        void DeleteFramebuffers(int n, IntPtr framebuffers);
        unsafe void DeleteFramebuffers(int n, uint* framebuffers);
        void DeleteProgram(uint program);
        void DeleteRenderbuffers(int n, [In]uint[] renderbuffers);
        void DeleteRenderbuffers(int n, IntPtr renderbuffers);
        unsafe void DeleteRenderbuffers(int n, uint* renderbuffers);
        void DeleteShader(uint shader);
        void DeleteTextures(int n, [In]uint[] textures);
        void DeleteTextures(int n, IntPtr textures);
        unsafe void DeleteTextures(int n, uint* textures);
        void DepthFunc(DepthFunction func);
        void DepthMask(GLboolean flag);
        void DepthRangef(float n, float f);
        void DetachShader(uint program, uint shader);
        void Disable(EnableCap cap);
        void DisableVertexAttribArray(uint index);
        void DrawArrays(PrimitiveType mode, int first, int count);
        void DrawElements(PrimitiveType mode, int count, uint type, IntPtr indices);
        void Enable(EnableCap cap);
        void EnableVertexAttribArray(uint index);
        void Finish();
        void Flush();
        void FramebufferRenderbuffer(uint target, uint attachment, uint renderbuffertarget, uint renderbuffer);
        void FramebufferTexture2D(uint target, uint attachment, uint textarget, uint texture, int level);
        void FrontFace(FrontFaceDirection mode);
        void GenBuffers(int n, [Out]uint[] buffers);
        void GenerateMipmap(uint target);
        void GenFramebuffers(int n, [Out]uint[] framebuffers);
        void GenRenderbuffers(int n, [Out]uint[] renderbuffers);
        void GenTextures(int n, [Out]uint[] textures);
        void GetActiveAttrib(uint program, uint index, int bufSize, [Out]int[] length, [Out]int[] size, [Out]uint[] type, ref string name);
        void GetActiveUniform(uint program, uint index, int bufSize, [Out]int[] length, [Out]int[] size, [Out]uint[] type, ref string name);
        void GetAttachedShaders(uint program, int maxCount, [Out]int[] count, [Out]uint[] shaders);
        int GetAttribLocation(uint program, [In]string name);
        void GetBooleanv(GetPName pname, [Out]GLboolean data);
        void GetBufferParameteriv(uint target, uint pname, [Out]int[] @params);
        ErrorCode GetError();
        void GetFloatv(GetPName pname, [Out]float[] data);
        void GetFramebufferAttachmentParameteriv(uint target, uint attachment, uint pname, [Out]int[] @params);
        void GetIntegerv(GetPName pname, [Out]int[] data);
        void GetProgramiv(uint program, uint pname, [Out]int[] @params);
        void GetProgramInfoLog(uint program, int bufSize, [Out]int[] length, ref string infoLog);
        void GetRenderbufferParameteriv(uint target, uint pname, [Out]int[] @params);
        void GetShaderiv(uint shader, uint pname, [Out]int[] @params);
        void GetShaderInfoLog(uint shader, int bufSize, [Out]int[] length, ref string infoLog);
        void GetShaderPrecisionFormat(uint shadertype, uint precisiontype, [Out]int[] range, [Out]int[] precision);
        void GetShaderSource(uint shader, int bufSize, [Out]int[] length, ref string source);
        [return: MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstStringReturnMarshaller))]
        string GetString(StringName name);
        void GetTexParameterfv(TextureTarget target, GetTextureParameter pname, [Out]float[] @params);
        void GetTexParameteriv(TextureTarget target, GetTextureParameter pname, [Out]int[] @params);
        void GetUniformfv(uint program, int location, [Out]float[] @params);
        void GetUniformiv(uint program, int location, [Out]int[] @params);
        int GetUniformLocation(uint program, [In]string name);
        void GetVertexAttribfv(uint index, uint pname, [Out]float[] @params);
        void GetVertexAttribiv(uint index, uint pname, [Out]int[] @params);
        void GetVertexAttribPointerv(uint index, uint pname, [Out]IntPtr[] pointer);
        void Hint(HintTarget target, HintMode mode);
        GLboolean IsBuffer(uint buffer);
        GLboolean IsEnabled(EnableCap cap);
        GLboolean IsFramebuffer(uint framebuffer);
        GLboolean IsProgram(uint program);
        GLboolean IsRenderbuffer(uint renderbuffer);
        GLboolean IsShader(uint shader);
        GLboolean IsTexture(uint texture);
        void LineWidth(float width);
        void LinkProgram(uint program);
        void PixelStorei(PixelStoreParameter pname, int param);
        void PolygonOffset(float factor, float units);
        void ReadPixels(int x, int y, int width, int height, PixelFormat format, PixelType type, IntPtr pixels);
        void ReleaseShaderCompiler();
        void RenderbufferStorage(uint target, uint internalformat, int width, int height);
        void SampleCoverage(float value, GLboolean invert);
        void Scissor(int x, int y, int width, int height);
        void ShaderBinary(int count, [In]uint[] shaders, uint binaryformat, IntPtr binary, int length);
        void ShaderSource(uint shader, int count, [In]string[] @string, [In]int[] length);
        void StencilFunc(StencilFunction func, int @ref, uint mask);
        void StencilFuncSeparate(uint face, StencilFunction func, int @ref, uint mask);
        void StencilMask(uint mask);
        void StencilMaskSeparate(uint face, uint mask);
        void StencilOp(StencilOp fail, StencilOp zfail, StencilOp zpass);
        void StencilOpSeparate(uint face, StencilOp sfail, StencilOp dpfail, StencilOp dppass);
        void TexImage2D(TextureTarget target, int level, int internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels);
        void TexParameterf(TextureTarget target, TextureParameterName pname, float param);
        void TexParameterfv(TextureTarget target, TextureParameterName pname, [In]float[] @params);
        void TexParameterfv(TextureTarget target, TextureParameterName pname, IntPtr @params);
        unsafe void TexParameterfv(TextureTarget target, TextureParameterName pname, float* @params);
        void TexParameteri(TextureTarget target, TextureParameterName pname, int param);
        void TexParameteriv(TextureTarget target, TextureParameterName pname, [In]int[] @params);
        void TexParameteriv(TextureTarget target, TextureParameterName pname, IntPtr @params);
        unsafe void TexParameteriv(TextureTarget target, TextureParameterName pname, int* @params);
        void TexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels);
        void Uniform1f(int location, float v0);
        void Uniform1fv(int location, int count, [In]float[] value);
        void Uniform1fv(int location, int count, IntPtr value);
        unsafe void Uniform1fv(int location, int count, float* value);
        void Uniform1i(int location, int v0);
        void Uniform1iv(int location, int count, [In]int[] value);
        void Uniform1iv(int location, int count, IntPtr value);
        unsafe void Uniform1iv(int location, int count, int* value);
        void Uniform2f(int location, float v0, float v1);
        void Uniform2fv(int location, int count, [In]float[] value);
        void Uniform2fv(int location, int count, IntPtr value);
        unsafe void Uniform2fv(int location, int count, float* value);
        void Uniform2i(int location, int v0, int v1);
        void Uniform2iv(int location, int count, [In]int[] value);
        void Uniform2iv(int location, int count, IntPtr value);
        unsafe void Uniform2iv(int location, int count, int* value);
        void Uniform3f(int location, float v0, float v1, float v2);
        void Uniform3fv(int location, int count, [In]float[] value);
        void Uniform3fv(int location, int count, IntPtr value);
        unsafe void Uniform3fv(int location, int count, float* value);
        void Uniform3i(int location, int v0, int v1, int v2);
        void Uniform3iv(int location, int count, [In]int[] value);
        void Uniform3iv(int location, int count, IntPtr value);
        unsafe void Uniform3iv(int location, int count, int* value);
        void Uniform4f(int location, float v0, float v1, float v2, float v3);
        void Uniform4fv(int location, int count, [In]float[] value);
        void Uniform4fv(int location, int count, IntPtr value);
        unsafe void Uniform4fv(int location, int count, float* value);
        void Uniform4i(int location, int v0, int v1, int v2, int v3);
        void Uniform4iv(int location, int count, [In]int[] value);
        void Uniform4iv(int location, int count, IntPtr value);
        unsafe void Uniform4iv(int location, int count, int* value);
        void UniformMatrix2fv(int location, int count, GLboolean transpose, [In]float[] value);
        void UniformMatrix2fv(int location, int count, GLboolean transpose, IntPtr value);
        unsafe void UniformMatrix2fv(int location, int count, GLboolean transpose, float* value);
        void UniformMatrix3fv(int location, int count, GLboolean transpose, [In]float[] value);
        void UniformMatrix3fv(int location, int count, GLboolean transpose, IntPtr value);
        unsafe void UniformMatrix3fv(int location, int count, GLboolean transpose, float* value);
        void UniformMatrix4fv(int location, int count, GLboolean transpose, [In]float[] value);
        void UniformMatrix4fv(int location, int count, GLboolean transpose, IntPtr value);
        unsafe void UniformMatrix4fv(int location, int count, GLboolean transpose, float* value);
        void UseProgram(uint program);
        void ValidateProgram(uint program);
        void VertexAttrib1f(uint index, float x);
        void VertexAttrib1fv(uint index, [In]float[] v);
        void VertexAttrib1fv(uint index, IntPtr v);
        unsafe void VertexAttrib1fv(uint index, float* v);
        void VertexAttrib2f(uint index, float x, float y);
        void VertexAttrib2fv(uint index, [In]float[] v);
        void VertexAttrib2fv(uint index, IntPtr v);
        unsafe void VertexAttrib2fv(uint index, float* v);
        void VertexAttrib3f(uint index, float x, float y, float z);
        void VertexAttrib3fv(uint index, [In]float[] v);
        void VertexAttrib3fv(uint index, IntPtr v);
        unsafe void VertexAttrib3fv(uint index, float* v);
        void VertexAttrib4f(uint index, float x, float y, float z, float w);
        void VertexAttrib4fv(uint index, [In]float[] v);
        void VertexAttrib4fv(uint index, IntPtr v);
        unsafe void VertexAttrib4fv(uint index, float* v);
        void VertexAttribPointer(uint index, int size, uint type, GLboolean normalized, int stride, IntPtr pointer);
        void Viewport(int x, int y, int width, int height);
    }
    public interface IEsVersion30
    {
        void ReadBuffer(ReadBufferMode mode);
        void DrawRangeElements(PrimitiveType mode, uint start, uint end, int count, uint type, IntPtr indices);
        void TexImage3D(TextureTarget target, int level, int internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels);
        void TexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels);
        void CopyTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);
        void CompressedTexImage3D(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data);
        void CompressedTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, IntPtr data);
        void GenQueries(int n, [Out]uint[] ids);
        void DeleteQueries(int n, [In]uint[] ids);
        void DeleteQueries(int n, IntPtr ids);
        unsafe void DeleteQueries(int n, uint* ids);
        GLboolean IsQuery(uint id);
        void BeginQuery(uint target, uint id);
        void EndQuery(uint target);
        void GetQueryiv(uint target, uint pname, [Out]int[] @params);
        void GetQueryObjectuiv(uint id, uint pname, [Out]uint[] @params);
        GLboolean UnmapBuffer(uint target);
        void GetBufferPointerv(uint target, uint pname, [Out]IntPtr[] @params);
        void DrawBuffers(int n, [In]uint[] bufs);
        void DrawBuffers(int n, IntPtr bufs);
        unsafe void DrawBuffers(int n, uint* bufs);
        void UniformMatrix2x3fv(int location, int count, GLboolean transpose, [In]float[] value);
        void UniformMatrix2x3fv(int location, int count, GLboolean transpose, IntPtr value);
        unsafe void UniformMatrix2x3fv(int location, int count, GLboolean transpose, float* value);
        void UniformMatrix3x2fv(int location, int count, GLboolean transpose, [In]float[] value);
        void UniformMatrix3x2fv(int location, int count, GLboolean transpose, IntPtr value);
        unsafe void UniformMatrix3x2fv(int location, int count, GLboolean transpose, float* value);
        void UniformMatrix2x4fv(int location, int count, GLboolean transpose, [In]float[] value);
        void UniformMatrix2x4fv(int location, int count, GLboolean transpose, IntPtr value);
        unsafe void UniformMatrix2x4fv(int location, int count, GLboolean transpose, float* value);
        void UniformMatrix4x2fv(int location, int count, GLboolean transpose, [In]float[] value);
        void UniformMatrix4x2fv(int location, int count, GLboolean transpose, IntPtr value);
        unsafe void UniformMatrix4x2fv(int location, int count, GLboolean transpose, float* value);
        void UniformMatrix3x4fv(int location, int count, GLboolean transpose, [In]float[] value);
        void UniformMatrix3x4fv(int location, int count, GLboolean transpose, IntPtr value);
        unsafe void UniformMatrix3x4fv(int location, int count, GLboolean transpose, float* value);
        void UniformMatrix4x3fv(int location, int count, GLboolean transpose, [In]float[] value);
        void UniformMatrix4x3fv(int location, int count, GLboolean transpose, IntPtr value);
        unsafe void UniformMatrix4x3fv(int location, int count, GLboolean transpose, float* value);
        void BlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, uint filter);
        void RenderbufferStorageMultisample(uint target, int samples, uint internalformat, int width, int height);
        void FramebufferTextureLayer(uint target, uint attachment, uint texture, int level, int layer);
        IntPtr MapBufferRange(uint target, IntPtr offset, IntPtr length, uint access);
        void FlushMappedBufferRange(uint target, IntPtr offset, IntPtr length);
        void BindVertexArray(uint array);
        void DeleteVertexArrays(int n, [In]uint[] arrays);
        void DeleteVertexArrays(int n, IntPtr arrays);
        unsafe void DeleteVertexArrays(int n, uint* arrays);
        void GenVertexArrays(int n, [Out]uint[] arrays);
        GLboolean IsVertexArray(uint array);
        void GetIntegeri_v(uint target, uint index, [Out]int[] data);
        void BeginTransformFeedback(uint primitiveMode);
        void EndTransformFeedback();
        void BindBufferRange(uint target, uint index, uint buffer, IntPtr offset, IntPtr size);
        void BindBufferBase(uint target, uint index, uint buffer);
        void TransformFeedbackVaryings(uint program, int count, [In]string[] varyings, uint bufferMode);
        void GetTransformFeedbackVarying(uint program, uint index, int bufSize, [Out]int[] length, [Out]int[] size, [Out]uint[] type, ref string name);
        void VertexAttribIPointer(uint index, int size, uint type, int stride, IntPtr pointer);
        void GetVertexAttribIiv(uint index, uint pname, [Out]int[] @params);
        void GetVertexAttribIuiv(uint index, uint pname, [Out]uint[] @params);
        void VertexAttribI4i(uint index, int x, int y, int z, int w);
        void VertexAttribI4ui(uint index, uint x, uint y, uint z, uint w);
        void VertexAttribI4iv(uint index, [In]int[] v);
        void VertexAttribI4iv(uint index, IntPtr v);
        unsafe void VertexAttribI4iv(uint index, int* v);
        void VertexAttribI4uiv(uint index, [In]uint[] v);
        void VertexAttribI4uiv(uint index, IntPtr v);
        unsafe void VertexAttribI4uiv(uint index, uint* v);
        void GetUniformuiv(uint program, int location, [Out]uint[] @params);
        int GetFragDataLocation(uint program, [In]string name);
        void Uniform1ui(int location, uint v0);
        void Uniform2ui(int location, uint v0, uint v1);
        void Uniform3ui(int location, uint v0, uint v1, uint v2);
        void Uniform4ui(int location, uint v0, uint v1, uint v2, uint v3);
        void Uniform1uiv(int location, int count, [In]uint[] value);
        void Uniform1uiv(int location, int count, IntPtr value);
        unsafe void Uniform1uiv(int location, int count, uint* value);
        void Uniform2uiv(int location, int count, [In]uint[] value);
        void Uniform2uiv(int location, int count, IntPtr value);
        unsafe void Uniform2uiv(int location, int count, uint* value);
        void Uniform3uiv(int location, int count, [In]uint[] value);
        void Uniform3uiv(int location, int count, IntPtr value);
        unsafe void Uniform3uiv(int location, int count, uint* value);
        void Uniform4uiv(int location, int count, [In]uint[] value);
        void Uniform4uiv(int location, int count, IntPtr value);
        unsafe void Uniform4uiv(int location, int count, uint* value);
        void ClearBufferiv(uint buffer, int drawbuffer, [In]int[] value);
        void ClearBufferiv(uint buffer, int drawbuffer, IntPtr value);
        unsafe void ClearBufferiv(uint buffer, int drawbuffer, int* value);
        void ClearBufferuiv(uint buffer, int drawbuffer, [In]uint[] value);
        void ClearBufferuiv(uint buffer, int drawbuffer, IntPtr value);
        unsafe void ClearBufferuiv(uint buffer, int drawbuffer, uint* value);
        void ClearBufferfv(uint buffer, int drawbuffer, [In]float[] value);
        void ClearBufferfv(uint buffer, int drawbuffer, IntPtr value);
        unsafe void ClearBufferfv(uint buffer, int drawbuffer, float* value);
        void ClearBufferfi(uint buffer, int drawbuffer, float depth, int stencil);
        [return: MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstStringReturnMarshaller))]
        string GetStringi(uint name, uint index);
        void CopyBufferSubData(uint readTarget, uint writeTarget, IntPtr readOffset, IntPtr writeOffset, IntPtr size);
        void GetUniformIndices(uint program, int uniformCount, [In]string[] uniformNames, [Out]uint[] uniformIndices);
        void GetActiveUniformsiv(uint program, int uniformCount, [In]uint[] uniformIndices, uint pname, [Out]int[] @params);
        uint GetUniformBlockIndex(uint program, [In]string uniformBlockName);
        void GetActiveUniformBlockiv(uint program, uint uniformBlockIndex, uint pname, [Out]int[] @params);
        void GetActiveUniformBlockName(uint program, uint uniformBlockIndex, int bufSize, [Out]int[] length, ref string uniformBlockName);
        void UniformBlockBinding(uint program, uint uniformBlockIndex, uint uniformBlockBinding);
        void DrawArraysInstanced(PrimitiveType mode, int first, int count, int instancecount);
        void DrawElementsInstanced(PrimitiveType mode, int count, uint type, IntPtr indices, int instancecount);
        IntPtr FenceSync(uint condition, uint flags);
        GLboolean IsSync(IntPtr sync);
        void DeleteSync(IntPtr sync);
        uint ClientWaitSync(IntPtr sync, uint flags, ulong timeout);
        void WaitSync(IntPtr sync, uint flags, ulong timeout);
        void GetInteger64v(uint pname, [Out]long[] data);
        void GetSynciv(IntPtr sync, uint pname, int bufSize, [Out]int[] length, [Out]int[] values);
        void GetInteger64i_v(uint target, uint index, [Out]long[] data);
        void GetBufferParameteri64v(uint target, uint pname, [Out]long[] @params);
        void GenSamplers(int count, [Out]uint[] samplers);
        void DeleteSamplers(int count, [In]uint[] samplers);
        void DeleteSamplers(int count, IntPtr samplers);
        unsafe void DeleteSamplers(int count, uint* samplers);
        GLboolean IsSampler(uint sampler);
        void BindSampler(uint unit, uint sampler);
        void SamplerParameteri(uint sampler, uint pname, int param);
        void SamplerParameteriv(uint sampler, uint pname, [In]int[] param);
        void SamplerParameteriv(uint sampler, uint pname, IntPtr param);
        unsafe void SamplerParameteriv(uint sampler, uint pname, int* param);
        void SamplerParameterf(uint sampler, uint pname, float param);
        void SamplerParameterfv(uint sampler, uint pname, [In]float[] param);
        void SamplerParameterfv(uint sampler, uint pname, IntPtr param);
        unsafe void SamplerParameterfv(uint sampler, uint pname, float* param);
        void GetSamplerParameteriv(uint sampler, uint pname, [Out]int[] @params);
        void GetSamplerParameterfv(uint sampler, uint pname, [Out]float[] @params);
        void VertexAttribDivisor(uint index, uint divisor);
        void BindTransformFeedback(uint target, uint id);
        void DeleteTransformFeedbacks(int n, [In]uint[] ids);
        void DeleteTransformFeedbacks(int n, IntPtr ids);
        unsafe void DeleteTransformFeedbacks(int n, uint* ids);
        void GenTransformFeedbacks(int n, [Out]uint[] ids);
        GLboolean IsTransformFeedback(uint id);
        void PauseTransformFeedback();
        void ResumeTransformFeedback();
        void GetProgramBinary(uint program, int bufSize, [Out]int[] length, [Out]uint[] binaryFormat, IntPtr binary);
        void ProgramBinary(uint program, uint binaryFormat, IntPtr binary, int length);
        void ProgramParameteri(uint program, uint pname, int value);
        void InvalidateFramebuffer(uint target, int numAttachments, [In]uint[] attachments);
        void InvalidateFramebuffer(uint target, int numAttachments, IntPtr attachments);
        unsafe void InvalidateFramebuffer(uint target, int numAttachments, uint* attachments);
        void InvalidateSubFramebuffer(uint target, int numAttachments, [In]uint[] attachments, int x, int y, int width, int height);
        void TexStorage2D(uint target, int levels, uint internalformat, int width, int height);
        void TexStorage3D(uint target, int levels, uint internalformat, int width, int height, int depth);
        void GetInternalformativ(uint target, uint internalformat, uint pname, int bufSize, [Out]int[] @params);
    }
    public interface IEsVersion31
    {
        void DispatchCompute(uint num_groups_x, uint num_groups_y, uint num_groups_z);
        void DispatchComputeIndirect(IntPtr indirect);
        void DrawArraysIndirect(PrimitiveType mode, IntPtr indirect);
        void DrawElementsIndirect(PrimitiveType mode, uint type, IntPtr indirect);
        void FramebufferParameteri(uint target, uint pname, int param);
        void GetFramebufferParameteriv(uint target, uint pname, [Out]int[] @params);
        void GetProgramInterfaceiv(uint program, uint programInterface, uint pname, [Out]int[] @params);
        uint GetProgramResourceIndex(uint program, uint programInterface, [In]string name);
        void GetProgramResourceName(uint program, uint programInterface, uint index, int bufSize, [Out]int[] length, ref string name);
        void GetProgramResourceiv(uint program, uint programInterface, uint index, int propCount, [In]uint[] props, int bufSize, [Out]int[] length, [Out]int[] @params);
        int GetProgramResourceLocation(uint program, uint programInterface, [In]string name);
        void UseProgramStages(uint pipeline, uint stages, uint program);
        void ActiveShaderProgram(uint pipeline, uint program);
        uint CreateShaderProgramv(uint type, int count, [In]string[] strings);
        void BindProgramPipeline(uint pipeline);
        void DeleteProgramPipelines(int n, [In]uint[] pipelines);
        void DeleteProgramPipelines(int n, IntPtr pipelines);
        unsafe void DeleteProgramPipelines(int n, uint* pipelines);
        void GenProgramPipelines(int n, [Out]uint[] pipelines);
        GLboolean IsProgramPipeline(uint pipeline);
        void GetProgramPipelineiv(uint pipeline, uint pname, [Out]int[] @params);
        void ProgramUniform1i(uint program, int location, int v0);
        void ProgramUniform2i(uint program, int location, int v0, int v1);
        void ProgramUniform3i(uint program, int location, int v0, int v1, int v2);
        void ProgramUniform4i(uint program, int location, int v0, int v1, int v2, int v3);
        void ProgramUniform1ui(uint program, int location, uint v0);
        void ProgramUniform2ui(uint program, int location, uint v0, uint v1);
        void ProgramUniform3ui(uint program, int location, uint v0, uint v1, uint v2);
        void ProgramUniform4ui(uint program, int location, uint v0, uint v1, uint v2, uint v3);
        void ProgramUniform1f(uint program, int location, float v0);
        void ProgramUniform2f(uint program, int location, float v0, float v1);
        void ProgramUniform3f(uint program, int location, float v0, float v1, float v2);
        void ProgramUniform4f(uint program, int location, float v0, float v1, float v2, float v3);
        void ProgramUniform1iv(uint program, int location, int count, [In]int[] value);
        void ProgramUniform1iv(uint program, int location, int count, IntPtr value);
        unsafe void ProgramUniform1iv(uint program, int location, int count, int* value);
        void ProgramUniform2iv(uint program, int location, int count, [In]int[] value);
        void ProgramUniform2iv(uint program, int location, int count, IntPtr value);
        unsafe void ProgramUniform2iv(uint program, int location, int count, int* value);
        void ProgramUniform3iv(uint program, int location, int count, [In]int[] value);
        void ProgramUniform3iv(uint program, int location, int count, IntPtr value);
        unsafe void ProgramUniform3iv(uint program, int location, int count, int* value);
        void ProgramUniform4iv(uint program, int location, int count, [In]int[] value);
        void ProgramUniform4iv(uint program, int location, int count, IntPtr value);
        unsafe void ProgramUniform4iv(uint program, int location, int count, int* value);
        void ProgramUniform1uiv(uint program, int location, int count, [In]uint[] value);
        void ProgramUniform1uiv(uint program, int location, int count, IntPtr value);
        unsafe void ProgramUniform1uiv(uint program, int location, int count, uint* value);
        void ProgramUniform2uiv(uint program, int location, int count, [In]uint[] value);
        void ProgramUniform2uiv(uint program, int location, int count, IntPtr value);
        unsafe void ProgramUniform2uiv(uint program, int location, int count, uint* value);
        void ProgramUniform3uiv(uint program, int location, int count, [In]uint[] value);
        void ProgramUniform3uiv(uint program, int location, int count, IntPtr value);
        unsafe void ProgramUniform3uiv(uint program, int location, int count, uint* value);
        void ProgramUniform4uiv(uint program, int location, int count, [In]uint[] value);
        void ProgramUniform4uiv(uint program, int location, int count, IntPtr value);
        unsafe void ProgramUniform4uiv(uint program, int location, int count, uint* value);
        void ProgramUniform1fv(uint program, int location, int count, [In]float[] value);
        void ProgramUniform1fv(uint program, int location, int count, IntPtr value);
        unsafe void ProgramUniform1fv(uint program, int location, int count, float* value);
        void ProgramUniform2fv(uint program, int location, int count, [In]float[] value);
        void ProgramUniform2fv(uint program, int location, int count, IntPtr value);
        unsafe void ProgramUniform2fv(uint program, int location, int count, float* value);
        void ProgramUniform3fv(uint program, int location, int count, [In]float[] value);
        void ProgramUniform3fv(uint program, int location, int count, IntPtr value);
        unsafe void ProgramUniform3fv(uint program, int location, int count, float* value);
        void ProgramUniform4fv(uint program, int location, int count, [In]float[] value);
        void ProgramUniform4fv(uint program, int location, int count, IntPtr value);
        unsafe void ProgramUniform4fv(uint program, int location, int count, float* value);
        void ProgramUniformMatrix2fv(uint program, int location, int count, GLboolean transpose, [In]float[] value);
        void ProgramUniformMatrix2fv(uint program, int location, int count, GLboolean transpose, IntPtr value);
        unsafe void ProgramUniformMatrix2fv(uint program, int location, int count, GLboolean transpose, float* value);
        void ProgramUniformMatrix3fv(uint program, int location, int count, GLboolean transpose, [In]float[] value);
        void ProgramUniformMatrix3fv(uint program, int location, int count, GLboolean transpose, IntPtr value);
        unsafe void ProgramUniformMatrix3fv(uint program, int location, int count, GLboolean transpose, float* value);
        void ProgramUniformMatrix4fv(uint program, int location, int count, GLboolean transpose, [In]float[] value);
        void ProgramUniformMatrix4fv(uint program, int location, int count, GLboolean transpose, IntPtr value);
        unsafe void ProgramUniformMatrix4fv(uint program, int location, int count, GLboolean transpose, float* value);
        void ProgramUniformMatrix2x3fv(uint program, int location, int count, GLboolean transpose, [In]float[] value);
        void ProgramUniformMatrix2x3fv(uint program, int location, int count, GLboolean transpose, IntPtr value);
        unsafe void ProgramUniformMatrix2x3fv(uint program, int location, int count, GLboolean transpose, float* value);
        void ProgramUniformMatrix3x2fv(uint program, int location, int count, GLboolean transpose, [In]float[] value);
        void ProgramUniformMatrix3x2fv(uint program, int location, int count, GLboolean transpose, IntPtr value);
        unsafe void ProgramUniformMatrix3x2fv(uint program, int location, int count, GLboolean transpose, float* value);
        void ProgramUniformMatrix2x4fv(uint program, int location, int count, GLboolean transpose, [In]float[] value);
        void ProgramUniformMatrix2x4fv(uint program, int location, int count, GLboolean transpose, IntPtr value);
        unsafe void ProgramUniformMatrix2x4fv(uint program, int location, int count, GLboolean transpose, float* value);
        void ProgramUniformMatrix4x2fv(uint program, int location, int count, GLboolean transpose, [In]float[] value);
        void ProgramUniformMatrix4x2fv(uint program, int location, int count, GLboolean transpose, IntPtr value);
        unsafe void ProgramUniformMatrix4x2fv(uint program, int location, int count, GLboolean transpose, float* value);
        void ProgramUniformMatrix3x4fv(uint program, int location, int count, GLboolean transpose, [In]float[] value);
        void ProgramUniformMatrix3x4fv(uint program, int location, int count, GLboolean transpose, IntPtr value);
        unsafe void ProgramUniformMatrix3x4fv(uint program, int location, int count, GLboolean transpose, float* value);
        void ProgramUniformMatrix4x3fv(uint program, int location, int count, GLboolean transpose, [In]float[] value);
        void ProgramUniformMatrix4x3fv(uint program, int location, int count, GLboolean transpose, IntPtr value);
        unsafe void ProgramUniformMatrix4x3fv(uint program, int location, int count, GLboolean transpose, float* value);
        void ValidateProgramPipeline(uint pipeline);
        void GetProgramPipelineInfoLog(uint pipeline, int bufSize, [Out]int[] length, ref string infoLog);
        void BindImageTexture(uint unit, uint texture, int level, GLboolean layered, int layer, uint access, uint format);
        void GetBooleani_v(uint target, uint index, [Out]GLboolean data);
        void MemoryBarrier(uint barriers);
        void MemoryBarrierByRegion(uint barriers);
        void TexStorage2DMultisample(uint target, int samples, uint internalformat, int width, int height, GLboolean fixedsamplelocations);
        void GetMultisamplefv(uint pname, uint index, [Out]float[] val);
        void SampleMaski(uint maskNumber, uint mask);
        void GetTexLevelParameteriv(TextureTarget target, int level, GetTextureParameter pname, [Out]int[] @params);
        void GetTexLevelParameterfv(TextureTarget target, int level, GetTextureParameter pname, [Out]float[] @params);
        void BindVertexBuffer(uint bindingindex, uint buffer, IntPtr offset, int stride);
        void VertexAttribFormat(uint attribindex, int size, uint type, GLboolean normalized, uint relativeoffset);
        void VertexAttribIFormat(uint attribindex, int size, uint type, uint relativeoffset);
        void VertexAttribBinding(uint attribindex, uint bindingindex);
        void VertexBindingDivisor(uint bindingindex, uint divisor);
    }
}
